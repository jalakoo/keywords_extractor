- Cool.
So let's get going.
- Let's get going, exactly.
So, we are
discovering Neo4j
Aura
DB Free with Michael and myself.
And yeah.
As usual, I give a quick overview
of what's going down today.
So, we will do a quick recap of what's Neo4j AuraDB Free.
I will do that in a second.
We pick a data set and then we work with that data set.
So, if you have a data set you'd like us to explore,
let us know.
If you have anything you find interesting
or thought, okay, this could be good for the session,
for this format here on the Mondays where we are live,
send it to us.
You can reach us.
Just put it in chat here if you're watching live.
If you watch this on demand later on,
you can tweet us on Twitter,
you can write us on discord,
you can reach out to us on the community forums.
There are many ways.
(Michael mumbles)
Exactly.
So,
just let us know.
Today we picked already a data set,
so you don't have to worry about that.
We think a little bit about what questions we might ask.
What kind of data set do we have?
What's interesting about it,
and what could be interesting in terms of an application
that would run with that dataset?
Out of these points, we will determine the data model
and develop that a little bit,
and then load and query obviously that's important
and get the data into Neo4j AuraDB Free,
and then play with it a little bit.
What is Neo4j AuraDB Free?
So, it's the free version of Neo4j AuraDB.
So AuraDB is our database as a cloud offering,
which we launched almost a year ago, I think.
And AuraDB Free was just recently announced
as publicly available for everybody.
Is the free edition of that graph database
as a service offering.
So you get
a slightly limited edition of Neo4j enterprise,
but you get the full features set basically.
And the limitation is in terms of nodes and relationships.
So you will have to do with 50,000 nodes
and 175,000 relationships.
You get full access to Neo4j Bloom as well as Browser.
It's free forever.
So that means, unlike Sandbox,
which is kind of like what we used to have in terms of
new user tryout without installing anything,
that closed ofF after seven days of The Sandbox.
Neo4j AuraDB Free stays with you forever.
It's free forever.
The only thing that could happen to you is,
if you don't use it it's gonna be paused,
but you can always get it back up again if you use it,
but that's only if you don't use it for a couple of days,
and then it stops
that process for you.
But you can always come back and log in again
and say, hey, I'm using this, and then it's up again.
If you wanna find out more, you can go to the landing page.
I'll post a link in a second.
But here we go.
Let's dive into it.
Today's topic is the Consumer Complaints Database.
So I think
we had talked about this last time a little bit,
that we wanna look into
here into the session.
And I think this is one of the top queries, right?
That come up comes up lots of times,
because it handles
the load CSV part of it all,
and oftentimes this session still comes up,
and it's an old session we have on our YouTube channel,
but we try.
We thought, okay, hey, can we modernize this a little bit,
and can we bring this onto
to 2021?
So this is... - Exactly, it's the idea.
(both giggling)
- The idea from today.
All right.
Anything you wanna add, Michael?
- Yeah.
Two quick things or three quick things.
So first of all, hi to everyone else.
Hi, Mustapha from Austin,
Michelle from Brazil and the person from London.
So, good to see people from all over the world.
And there was a question from Alexei of APAC,
are new semantics are available and order will be free.
So APAC core or a subset of APAC core is available on
or to be free, not default version,
because default version has what's the dependencies
on extra libraries that are not available there.
And new semantics is currently not available
on AuraDB free.
But if you're also looking into working on an
version of new semantics that actually runs
outside of the database, and so we'll see
if that's something that makes progress.
And then Harsh had a question.
Using an graph database for accounting and invoicing,
basically, as you can use graph databases everywhere
where you can use a relational database,
I think it makes sense we can use it there.
The only thing that it's probably not as well suited for us,
if you have to do massive number crunching calculation.
So if you want to compute like
what's the average invoice price
about over a hundred million invoices
or something like that or like a disarranged.
So, I mean, if it's just a million or so
it's not a big deal,
but if it's like clearly number crunching
on large data volumes, state of hours,
like things that's probably not as well suited for.
But otherwise for anything up to scale,
it's definitely possible to do it as such.
And there was one comment that I wanted to make
to what you said Alex about Aura Enterprise features.
AuraDB Free Neo4j Enterprise features.
So actually on Aura,
there two features that are not available.
One a user management and the other one is Multi-database.
So instead of using Multi-database
that you would use otherwise on a Self-hosted version,
you just create a new or instance basically,
and for user management,
that's kind of part of the higher level tiers of...
So you have only one user basically to work with,
just for people to know that,
if you set the right expectations.
- Yeah, that's good to mention that.
Yeah, and yeah.
It makes it makes sense, right?
I mean,
the idea is to get going with it if you...
- Except... - If you wanna do
user management and Multi-database,
then you are more than starting,
and then I guess that's not really
the point of offering that in a free starter edition.
But yes.
These features are available in Neo4j Enterprise,
but don't make sense
in AuraDB Free.
- Yep. Cool.
And otherwise, I would say let's get started.
So it's really an exciting topic today
and I'm really looking forward to it.
Let me share my screen.
- Yep.
- Can you see that?
- I can see that.
- Okay.
So if you're talking to a day about reenacting this webinar,
that Nicole, our Data Scientists,
did actually six years ago, from 2015.
(Alexander giggling)
You see it has 56,000 views, almost 500 likes.
So people really go back to this, time and again,
I thought actually it would be really nice.
I mean, she did a great job there,
but to pull it up basically,
it where it's a new Virgin version
and show how to do it on Aura.
But otherwise, I would kind of like
to keep what she's done there,
because the approach did the model
and the Load approach was pretty smart.
And so from that perspective,
you have to stick with her data model,
which makes a lot of sense for the state,
and then we
go for AuraDB Free instead.
So the data that she loads here is Consumer Complaints.
So there is some data to golf Consumer Complaint Database,
and you can just download a CSV here.
It's actually, if you look at it in my shell,
it's 2.3 million
rows.
And because Aura has this limitation that Alex mentioned,
I just sub-fitted it to own use November, 2021,
which gives us $5 in complaints, basically.
Sorry.
12 file is, I think,
1.4 gigabytes,
but it's a little bit much for Aura to be free,
but for us, this example, a subset shall be good enough.
And I actually used Access V here just as a tip
for data loading.
Access V as in CSV
Command Line Tool written Rust,
which is basically for going really fast,
and you can quickly compress and extract and sub select
and select columns and clean up CSVs with that.
So you can just install it on your system
and then it works really well.
So for instance, if I do...
It's 1.4 gigabytes,
sub-tutoring takes 1.17 seconds, basically.
So it's really pretty nice.
And now I have my
November, 2021 subset in here.
Cool.
So much for that kind of getting the subset of the data.
So I have two options on where we can load this from once.
I just put it into a GitHub, just such, so just,
you can create a new organ up just drag and drop the file
or upload the file into here.
So that's what I have here.
That's one option.
One other quick option for putting data public
is to just import into a Google Sheet.
And then there's this, in the file menu,
you can do publish two of that
and then you select a tap,
not the entire document by the tap, and then say,
I want to have this as comma separated value.
And then you get a link for this published thing here.
So we can now access these two links
either from the GitHub just the row link
or the Google sheet link as such.
So it's in file published to the web here in this area.
So if you quickly look at the CSV,
what do we have in terms of data?
So we have data CIF and mostly complete data CIF
what product, what's it about.
The product are not just physical product,
but also like Medical products
or credits or loans and things like that.
Products can have sub products.
Here's the issue that popped up with this product.
There might be a sub issue and subsidy.
Here's the text of the Consumer Complaint.
There's a company which kind of provides this product.
And there might be a public response
from the company or not.
A state of the user sub code.
There's are some texts here which you can also use
that were not there in Nicole's data set actually.
Then there's consent providers, I think,
which were also not here last time.
How they were submitted.
I think that's almost all of them,
so we can probably almost ignore this.
So that's one good phone,
but when once it sent (mumbles) company,
did the company respond?
And what's the response timely?
And the complaint ID.
So that's kind of the data that you're looking at here
from that perspective.
Please shout if you have questions in general.
So if you want to model this data,
I go to that Arrows.app.
Arrows.app is our quick graph modeling tool.
So we can use this really quickly.
And if you go there for the first time,
like I've done on my new computer year,
you get this really nice,
it will come with some keyboard shortcuts.
And so you should definitely have a look at.
So to just done, and give this graph a name,
which is Consumer Complaints.
Okay.
So, and of course our first note
that we create from the data as a Complaint, right?
So, the complainant has an ID so we can...
- So Mikey (clears throat)
your resolution is a little bit blurry.
Is that... - Okay?
- Because you had selected a low resolution or?
- I have an equally high resolution.
I can probably set my Mac back to standard resolution.
Let me try this.
One second.
Display.
So maximum that's maximum resolution, basically.
So just this less.
Did it change something Alex?
- A little bit, but it still looks maybe stop sharing and...
- Stop sharing (indistinct)
- Maybe that can help, yeah.
- This is better?
Any better?
Or not?
- A little bit.
Yeah, I think that's a little bit better.
Yep. - Okay.
Let us know on a stream if that's okay for you as well.
Okay.
So if you have to Complain 50 ID
that we just saw in our data, here at the end.
And then the other thing that we have in complaint,
is the date.
That's our rows, oops!
So we have the date as well.
And
then we also have the complaint texts as well,
but we can, I think, probably ought this on the issue.
So the other things that we have
is kind of personal information,
so we can decide if you want to put this on a separate note,
like a person note.
But because we don't really know the person,
I would say, we you can just put a state and the zip code
also on the only complaint for the time being.
If you decide to pull it out at all,
there's an option later on.
So the other things that we have is the complaint is
for a product.
So you have here,
can drag out a new note on the side
and say this is a product,
and this complaint is about this product.
And it could also be that as a product.
So some of these complaints have an subproduct as well.
For instance, if you have a loan,
also a specific type of loan
and then our sub product is in this category,
or
of this product here, right?
And so the product has a name.
So if you go to properties,
name, which is a string and it's subproduct has as well
a name, which is a string.
Because this is kind of user generated data,
I'll do the same as any caller had done back then,
which is kind of to make everything uppercase,
so that you don't get any like uppercase,
lowercase spelling, things here.
So, the other thing that we have is the company,
and this kind of against this company,
which kind of provides this product.
The company has also a name, oops, sorry.
Let me show some move to label.
Can I remove this here?
So what else did we have in our...
So we have data, we have product,
we have subproduct, we have also Issue and sub issue.
And
then we might have an response.
So let's add the issue and the sub issue.
So the complaint has an issue
and potentially a sub issue.
And
just like... - Why did you put these, okay.
(both giggling)
- Just a sub issue of this issue for instance,
and a complaint.
What was the model that Nicole had?
Let me just sneak into this.
So this is about, this is the Issue and relationship
so that we stay true to our...
Oh it's also in category, okay.
Let's use in category.
Okay.
Then we also had these Tags that Nicole didn't have.
So we have also a Tag with a name,
but not many of these complaints have a Tag, only a few.
Oops!
And the sub issue and Issue have also a name property.
And then there might be another response from the company.
So that's this basically a relationship.
This is against this company.
And if the company responded,
I do have some response.
This complaint and what do you think our code response tool.
So basically this arrow points,
specifically from complaint to response,
you can reverse this arrow so it points from,
and this is response to this and the company basically.
- Answers... - Provide, yeah.
Okay.
Answered with a response and let's look at our data.
What else do we have here?
And state, zip code, tags, consumer consent.
Why did submitted via
did send to company?
That's something that goes under the relationship
and company's responds to customer and timely response.
So it is this something that we can put on.
So did send to company, we can put
and the relationship here.
And then a timely response is something that we can
either put on the response or on this relationship here.
- Or we can put it on, yeah, to answer it.
- Give us an interesting thing because Nicole had
a response.
Let's see.
Company public response.
So let's see what is her?
So this company, need public response as the tech savvy
can put it on there, but it might not be,
so we can probably
use this as the type of response basically,
and add the additional information under relationships.
So response text
and
timely response.
So response texts,
picks is a string,
timely it's Boolean
and then there is
disputed, right?
So either that's not available or yes or no,
if they could dispute it or not.
But it seems, at least in our data set,
it almost seems everything is not available for disputed.
So we can also leave it off for...
- You can make it more (indistinct)
- Okay.
So I'm gonna just move this.
Okay.
So that's a pretty complex data model, right?
And let's see how far we get with importing that as such.
Any questions so far from anyone on this stream
or can we get going?
- I think we can get going.
I think that this is, like you said,
is a little bit more on the complex side, but I think
we explained it now
and from looking at the...
If you go back to the, maybe to the Arrows...
- To the model?
- To the model,
it's far from that table,
starting with the complaint
and I guess that's what we did here.
We started with the complaint as the central core
and then the rest of the nodes surrounding it
made sense to put them there.
I guess one or the other.
I mean, for example,
when I read it the first time I thought, okay,
issue has sub issue.
Where is the relationship between complaint and sub issue
when the issue is kind of linked with sub issue?
But I mean, that's kind of
depending on the curious we wanna ask,
it's not a necessity, I think probably,
but that's more like granular things.
- Yeah.
That's a good question.
Actually the problem with the data is that,
the sub issues are not always there, just sometimes.
And
so are some empty spaces here.
That means we could not only link to the sub issue
and then to the issue, for instance,
because the sub issue might not be there, right?
So we need to have both basically the main issue
and that's kind of in sub category as such.
It's because we still need to verify that this sub issue
is with this complaint as well.
If you only linked to the issue,
then this issue might have 20 or 50 different sub issues.
And we don't know which of the 50 sub issues
this complaint is correlated with basically.
- Okay.
- As such, yeah.
But it's because there's only 12,000 complaints,
but are much fewer companies, much fewer products,
much fewer sub products, much new tags,
sub issues, issues, and responses, right?
So the other nodes counts are much smaller
because it's the same.
So they kind of categorize these issues as well,
and the sub issue.
So it's not like an individual person's texts basically,
but it's more like the
general, couldn't access the database for a loan
or something like that, or the application for the loan
or things like that.
So more general things.
Okay.
So in Neo4j Aura, actually if you have your databases here,
you can click on, Create Database
and then you select a database type that you want.
So we want to have AuraDB Free.
If you give it a name, for instance,
Consumer Complaints,
select region, for instance in Iowa,
and I want to have a blank database
and then you just click on, create a database
and it starts creating your database.
You need to store the password,
and say, I have stored that and then click on continue,
and then it basically is creating your database.
And it takes a few minutes.
That's why I already went ahead and created one
that's already running for me.
Okay.
And...
- Do you wanna click on that stream?
This stream is showing your screen button.
- Oh, I'm sorry.
Cool.
And in this Aura database you can say open with
and Neo4j browser.
And if you do this, if you get the connection,
and then if you need to log in and use the password
that you had saved there somewhere here.
And then we can login.
- Yeah.
Do not forget to save that password
because if you don't save it, nobody knows that password
and then you have delete it and set up a new instance.
- Yeah, exactly.
But it's not such a big deal to drop and...
- No. (crosstalk)
- Except if you have all the data in there
that you want to keep, then it's a different story.
- I'll tell you, you could still have access to back up
or at least take a snapshot and then save snapshot,
and then you create a new database from the snapshot.
So that should...
- It's not always lost, yeah.
But it's a little bit more complicated.
- Okay.
And so we have our browser here
and then what I want to do first,
is basically look a little bit at the data.
So we use here Load CSV with headers
because our CSV file had headers,
and this is the URL is just a shorter UFO.
I'll get you out of here.
And S row is basically what we call each line,
basically that we get from back from the CSV,
to return the first hundred rows.
So between row limit 100.
So you see it turns, 100 roles,
and then we can look at the data
basically, as we saw it
in our CSV as well.
So if you have the complete ID here and so on.
So now we can actually start building up our statement
to import the data, right?
Oh no, I forgot something.
Because we want to make sure
that all the data is non-duplicate nor
in our system, we need to create a bunch of constraints.
So you say, create constraint
on C complaint,
insert c.id
is unique, right?
So that means we can't create two constraints
with the same ID anymore.
It would fail as such.
And because each constraint also creates an automatic index,
finding complaint by ID is also much faster as such.
And because we need a bunch of other constraints as well,
I'll just do this in line here.
We have the company, we have the issue,
we have the sub issue,
we have the product,
product,
tag,
and give us punts.
I forget anything?
Issue, tag, sub issue, subproduct,
product, company.
And company, we did run.
I think I did company.
Already exists.
So now we a five,
six constraints.
So we have colon schema, we can look at them
and you'll see here the two types
and what property is constrained.
And then it also ID constraints set down here
and coding indexes are up here as well.
So we have set
for the import.
Cool.
So let's also have a quick look at how much data
is actually in the file.
If you can load it all without problems.
So I just said,
obviously you've had us return count and star,
and this gives us,
what do you call on?
Gives us all 5,000 rows if you saw before in my show.
So that's good.
So now we want to create our database.
- Well that's good enough.
- Exactly.
So, because we don't want to create applicants,
we also say we create a complaint,
complaint completion.
If the ID is row dot
and then the field name here,
let's look at a field names, has a space in there,
the complaint ID.
So we need to escape this with back text.
So if it was just a single string,
like something like zip or something like that,
and we don't need to do this,
but because it has a space in there, you need to do this.
And then we set the
date.
What date received
on row dot.
And it was here.
It received
but because this is just a string here.
These dates are just strings
if you turn it into a date type funny for JP,
just calling the date function around it.
and then it creates a date for that.
So the other things that you wanted to set was the zip code,
this is row. in the state.
This is a state and zip code.
It's as well.
So we need to back date that
and said C dot
state. - State.
- Row dot state.
What's an upper case, I think is.
Okay.
So, and if you run this and nothing is wrong,
it should actually create our 12,000 complaints.
See.
There we are.
It's 5,000 complaints created and click on complaint here.
I see all complaints.
And if you click on these, you can also configure,
what do you want to see
as name here.
So it's same ID, state.
So I conference it safe, which date from,
or which date is this from as well.
And you can also recolor them and then so on.
But you also see the properties
of each of these complaints as well.
So that's worked good.
So that's step number one.
And now we want to add more data, right?
So for instance,
the company information here, right?
So we have the complaint and we want to find and connect
to the company.
So basically what we now do is, we do the same node CSV,
but instead of merging or creating the complaint,
we just find it in the database.
So if I just want to find them
and see how many complaints I have found in database,
it should be also five thousands (mumbles)
So because we edit all of them.
So that's good.
And now have a for complaint, you need to create a company
with the name, because we said name is the unique key,
and I think it's to upper or to uppercase.
Oh, let's forget this.
And row dot
company name or company, just company.
Row dot Company.
And
then we also create a relationship
between the complaint and the company.
Against
and then we can set on this relationship,
our date.
Where we said, this is the date of
it sent to company.
Right.
So,
but this then find our complaint for this current row.
Then for this current row,
creates a company if it doesn't exist yet,
using to upper on the names or in case we have misspellings
and things like that, so it's all one.
And then we create a relationship
from the complaints against company
and set your relationship property date on this.
So let's see if this works.
And it created 463 companies.
So we now should also see company here.
And if I click on a company, we see all these companies.
You can actually make them a little bit bigger.
So their name is...
So you see it as different bank
providers, Equifax, JP Morgan, and so on.
And if you could know, already do a first query that says,
well, actually the company's 50 most complaints, right?
So we say,
return n dot
name
comma.
Let's make it easier.
So we have
bend against the company.
So we return n dot name comma, colon, star.
So how many times did this against relationship exist
for these companies?
And then we just order by C descending
limit 10 or so.
So the first two top 10 companies in November, 2021
that got complaints such.
So we see it's $5 against Equifax
and $3,500 against TransUnion
and so on.
And then there's a long power tail.
- Used to talk of... (Alexander giggling)
- Yeah, okay.
There seems to be some reason for that.
- Yeah, maybe. (giggling)
- Okay.
Now we have a 12 of our elements in India, right?
So we have our company and the against relationship,
and if you click on the against relationship,
you also see the dates here as well.
What's actually nice, if you want to,
you can actually choose something else
that comes up under relationship.
So for instance, if I want to say,
I want to see two dates here, then I can,
once switch this around
and show other things on this relationship,
which is quite nice as well.
Okay.
Now we can continue.
So the next things are basically
very similar to what we did with the companies, right?
So we find our complaint again,
and instead of merging a company, we merge our issue
and I think it's just quote issue,
and then we have sub issue, right?
So we have issue
and
pretty relationships.
The name for the forth and fifth.
- Do you wanna keep the issue in uppercase or no?
- Yep.
Good point. Yeah.
So let's keep this so that it's all unified
and then we don't need the date, property here, right?
So on the issue of you can have anything
and sub issue as well.
And 50 sub issues because some of those don't exist,
so they are blank basically.
So just some blank sub issue here.
So we want to only create sub issues that are not blank.
So what you do is we say, and with star where,
so we can actually filter and we say,
there row dot sub issue of issue.
- Sub issue, yup.
Yup.
- What else would we spelling
because you should have the lowercase,
I typically data quality things.
So it's not a empty string.
So,
we couldn't even say that trim
of sub issue is not an empty string.
So even if you... - You need the backticks here,
because it's with a hyphen.
- Yeah.
Because of the hyphen exactly.
- Yep.
- And now you only get a row spec
that has sub issues that are not an empty string.
And now we basically connect our sub issue.
Issue into our complaint basically,
and
issue and sub issue.
And then we also create relationship
between the sub issues and issue if it doesn't exist yet.
That's called
in category.
(mumbles)
Things here.
So let's see.
So just looks, I think, okay.
What is complain about?
You go for it, okay ?
- Okay.
So, because we use this relationship twice,
it will pull in all the data at once
and don't allow us to patch it into multiple transactions,
but that's not relevant for this small dataset.
And with this if you run this actually
it finds the complaint,
creates the issue if it doesn't exist,
connects the complaint to the issue,
filters out the sub issues that don't have data,
creates a sub issue that exists.
If it doesn't exist yet, connects the complaint
with the sub issue and connects to sub issue with the issue
if they are not connected yet.
So if you ran this, then in a few seconds we have 181,
that means a bunch of issues and bunch of sub issues.
So we can for instance,
take one off our complaints over here and if we expand this
we see, now there's suddenly all these,
the brownish ones are the sub issues
and the red ones are the issues.
So our data is here.
So let's, probably should just look at one complaint.
Let's just have one complaint.
So it's easier if we get one complaint against a company
with this issue and a sub issue is in this category, right?
And now if you wanted to, we could expand.
Other people that have the same issue, for instance,
with this company or something like that, right?
Or other people that reported the same issue
from the same state, or something like that.
So for instance, if you want to do this, you can, just wait.
Complaint and
just has some
with
assume,
and then you want see how many people
per state have this issue.
And then you can say, okay, and reorder by count again.
And I need to spell this correctly.
And if you see this then most people in Texas and,
what is this?
Pennsylvania, Florida,
California, have to have these issues.
Good.
So,
okay.
And on the other side you have to products.
But this looks very, very similar to what we had already.
So we can just...
Just want to change something.
So we can basically,
instead of issue of now the product here.
So P product,
and this is just called product, I think,
and sub product, right?
Product and sub product.
- For long case p.
- And they you have the same problem?
Sub products can be there, but don't have to be there.
So that's kind of the problem.
And your relationship type is about.
So about
product
and the sub product is as p,
a product.
So that's pretty nice have to competition.
If you forgot, if you had an uppercase P or lowercase p,
you can just press come out or Control + Space
and then just (indistinct)
About SP,
and then S P is in category P.
Right?
So this should create all our right side, oh sorry,
all left side of our graph model.
Let's see how many products are there?
53.
So not so many products in November.
So if, again, we look at this one complaint and expand it,
now it has not just the issue and a sub issue,
but also the product and
the sub product and this company.
Alright.
- So lots of complaints about one product,
one company, maybe.
- Yeah. (Alexander giggling)
- Exactly.
- It's not a good sign.
- Yeah. (Alexander giggling)
- And then the next one is, what's missing is the tags.
So we saw that a bunch of tags as well, right?
But that's also something that's optional.
So this is called tags,
I think.
We have that.
Cause if you have product, we have sub product,
we have issue, we have sub issue.
This is the complaint text here, I think.
The public response
Company as we said we have covered, text is the next one.
Okay. It's just tags.
And we just create a
tag
T
and tags.
And, what did I call this?
Oh, nothing.
- Has tag.
- Or something like that.
Right.
Okay.
Tagged t.
But this should be, not so many,
because you already saw on the data
that there's not so many tags such.
Only three, so that's very few tags on each row.
So it's old American, interesting service member,
I think it's this one.
Service member and old American.
Old American, oh, that's a comma separate.
Oh, that's interesting.
So we basically created,
so this is actually comma separated.
So that's actually a good trick to show you for the import.
What do you actually want to do is not
just created for tags.
So let me just quickly delete this text that we have,
so we start over and touch and it's all
Some three tags are gone
but what you actually want to do is,
you want to split this on comma.
So you saw that there's...
- Multiple texts per...
- Multiple texts
- Per line. - Per line, right?
- Yeah.
- So I just wanted to see if there's a space behind it
after the comma, actually we can
also look at the data or service.
So can just say
return this thing to row dit tags,
and then we should see this.
So there's a comma space, right?
Important.
So what you do instead is you she say, split the tags.
So we say, unwind, split row dot tags.
So we split the tags by common space
S tag name,
We split the tags and then turn this list,
if you get back here into rows.
So each of these list elements become
in a row.
So actually, let me do this in two steps.
If you return
row tags
and then, oh no, that's...
Yep.
Picks name.
So if you just want to see this, then it would be,
I done a list with one element for these two
or a list of two elements here.
And this list you turn into rows
instead of returning this list view to an unwind,
but each of these elements becomes a row
and then use tag name instead of...
So if you could also save it to upper here,
because you have only three,
but just from a consistency perspective.
All right.
And if you do this, we get all three,
no, actually navigate only two tags,
because we have only a service member and old American.
It's a really interesting way of tagging.
I mean, service member, I can understand.
There are some veteran-related things.
But old American is kind of interesting.
(Alexander giggling and murmurs)
They have only two tags now.
(Alexander giggling) Anyway,
cool.
Now the interesting thing is to see response.
So you said if, if just a response to our complaint
and we also want to record this.
So,
that means if you need to go back
to our
thing here.
So if you find our complaint,
if you also want to find our company actually,
do you want to connect a company to...
It was just company, right?
Yep.
Company.
And then we want to have this complaint company
correspondence sent to consumer.
That's
row or cell that we want to look at,
and this is what you call response.
And then our relationship type was
actually from response to complaint.
That's a good point.
So if you have to flip to the directional arrow here,
so the response
as a
complaint, and if you have from company ,
what if you say, answered or something like that right Alex?
- And I think so, yeah,
- Yup.
Answered, and that's always our response.
And then the other thing that we had responded
to store stuff onto this points to text
and if it was timely, right?
So one simple thing is the tiny bit.
So you see, a sheet that's yes.
That's also no and blanks.
So if you only want to say,
does this timely you've entered was, and yes.
So we just say,
set.
- So you don't wanna save the nos'?
- No is automatically false.
Basically what you say is...
- Oh, I see.
- A timely response.
Even including question mark.
- Including, exactly.
So don't forget the question marks.
- Okay.
(both giggling)
Getting interesting.
This is equal to yes.
Then it says either true or false basically.
So it compares the terminals points field with yes,
and if it's yes, then this is true and otherwise it's false,
and that's what ends up on our timely.
And rel or or text.
So we need to find out where the text falls,
consent company, public response this one.
I love this data
because if the text
the case when.
So let's see.
It said this only even it actually exists
and not when it's empty.
Then when it's emptied and you want to set it to now,
row dot.
We check when this is an empty string,
then we just don't want to spread anything
and we just said now on the texts,
which removes it again.
And then otherwise you send the response itself.
And if you sent this, and I think there was no date
for the response, right?
Or did I miss this?
This is the date when it got sent to the company,
but no date when the company actually responded.
- Don't think I saw that.
- Okay, cool.
So if you run this, heard there's something wrong.
Oh, this is not a program
in which it's only support you could sign.
So, and if you had for, oh, that's interesting.
There are only four types of company responses.
I would not have expected.
I thought it would be more types of responses.
Okay.
Closed with monetary leave, closed with non-monetary leave,
close with explanation and then progress.
Oh, interesting.
Okay?
That's kind of makes sense,
but that's more like a S a state or so.
And that's why I think if you look at one of our complaints
again,
let's take one
and see
what's the response.
That's on the relationship between this we have,
the timely and the text than it has a text.
So let's see if you find one that has a text.
Where
our dot text,
not,
you need to disable and connect with side nodes
because otherwise if you automatically connect our stuff,
oh, they have all of those texts response, interesting.
Company has responded to the customer
and to see if CFPB and chose not to provide A PUBLIC.
(laughing hysterically)
Okay.
Okay.
That's not a public response, okay?
So it's only a private response basically.
Interesting.
Okay.
And that's kind of our data model now.
So if you look at this and call db dot
schema virtualization,
this is basically what you have here.
If you got give to tags or relationship to the...
- I thought I had given them one.
Because you have tag here,
but there might be an issue with this.
- Or at least the old tags.
Maybe they are still as a label.
- Oh, yeah.
It could be here.
Because I have our two tags and I thought.
- Yeah.
- Okay.
- Oh, I might've made a mistake there.
That's actually a good point.
Let's go back to those.
Or we probably get rid of the text for the time being again.
And then if you use history,
then you see your past it months
and then we can find our tags.
Here is our tag,
and,
oh, I see.
So the problem is when you use WITH
and you don't pass along stuff from before, it gets lost.
So you need to pass along the things that you want to have.
So for instance, our complaint needs to be passed along
in this place, and if it doesn't,
then it creates a new node for that.
That's the problem.
So but this tag name, this is our complaint now.
Okay, now it should actually look.
Oops!
Okay.
So if we now look at our texts, it should have many more.
Yup.
- Oh, I see.
Okay, perfect. Yeah.
- So, good point.
So we found actually an issue with our statement
called DB schema visualization, and now the tags is also...
- Now they're connected.
Nice.
- I don't know if we can busy draw or
a model like we had it.
- In Arrows just before, yeah.
Yeah, exactly.
Yeah.
Right.
- So in, just in category, I think it's wrong.
That's doesn't really exist from a product.
That's actually an artifact.
That's not correct.
Okay.
So of course, if you call it apoc meta,
graph then should not show up.
Let's see.
Yep.
Right.
So and that up kind of inputs our data,
now we can do lots of fun things.
So we can look at distribution from companies,
we can see what all repeated issues of product are.
People from the same zip code have issues.
Are there basically the same kind of responses
for the same product and things like that.
So we can do all kinds of fun, various of that.
Perhaps you can do the last one before you run out of time.
- Yeah, we can either do one now
and then maybe we do another session
next week or something
now that we have established a model,
I think it would be nice to do a one or two queries on it.
- Yes.
When I saw that,
though this is our a complaint product and response,
and we wanted to say how frequently are
basic responses for the same product happening.
So we kind of, as you say, part of that name.
We ignore actually complaint
because they actually complaint is not interesting for us,
only to comment and response name
and count star order by count.
Sending.
Limit 10.
We see that in progress, is very frequent
and close with explanation as second most frequent,
and then it tip us off again.
- Yeah.
- You could also do things like, okay,
how often did this occur in total basically?
And then say, what's the percentage of responses that have
this product
has this as such.
So we can say
for
C.
And you can just say how many times did this response
So if you put out,
that or response code, that's sort of the total number
of response with this
and
we just match this again and then say,
we can also have a percentage gone.
So, which is basically
to float or C,
because you needed a floating point by our count,
or if he say C times hundred.
So we get the percentages aS hundred.
As percent.
Oops!.
- Again, you need to...
- Oh, sorry.
Because of C here, twice, so we don't.
Oh, okay.
Of course.
Okay.
And let me see.
That's not correct.
- No. (laughing)
- That (mumbles) is not correct.
What's the problem?
Our response, our name?
what's the total count?
Oh!
Oh, of course we need to measure
how often did the response not existing in general,
but how often did the occur,
in regard to probably another product.
So we basically need to do our count and then
actually I could be that it actually, oh, \ let's see.
Yeah.
So 93%.
- Yeah, okay.
- For this kind of product are in progress basically.
So it's very, to set a factory, for 93% of the people
that raised the complaint, that this is not.
- Yeah.
- For other product products like debt collection
and progress, is only two percent.
So that's an interesting...
So I guess that's where people
or institutions want to get money.
They're more likely to kind of finish these complaints.
And whereas in other cases,
they're not as likely to do that.
So we could also order not by C, but by the percent.
Obviously the ones that have high percentages on top,
even if the counts are quite low.
So that's also, you can also look at this as well.
Cool.
And that I think concludes this session
and I hope we did it justice, and Nicole's video.
So, let's see if our video gets as many views as Nicole's.
- Maybe, yeah.
We can definitely.
I mean, either we explore it some more next week
or if you have any questions type it in, let us know,
reach out, and then we can dig some more into it.
- Yeah.
- And I'll write up a blog post again
and chat over the course of the week,
and then like the last few,
once we did actually also turn into a blog post.
So if you go to our developer blog, you can see.
That's actually, somebody down here.
- You'll find it definitely on our developer blog,
and then also in the YouTube video description
where there is
all this information in the description below
you can click on that link.
I will add that afterwards.
- So we have all the information.
And so from that perspective.
Yep.
You can follow that along in the blog post as well.
Cool.
Sounds good.
Thank you all.
- Alright.
Thank you, Michael.
Thank you for taking the time again to lead us through.
Thank you all for joining.
Thank you for watching and commenting,
and I hope you enjoyed the session, and yeah.
We'll be back next week.
- Yep.
- And yeah.
Wish you all a good time and see you soon.
- Take care everyone. - Take care.