hello and good morning everybody good
afternoon good evening wherever you're
watching uh hello joe thank you for for
joining me today
hi how is it going
yeah pretty good thank you very good
very good uh
so uh
joe has not been on this on in this
segment before so maybe you wanna wanna
share a few words uh
who you are what you're doing and uh
yeah maybe
maybe you start with that
sure uh hi everyone uh good morning good
afternoon good evening
my name is joe depoe uh forgive me if i
sound a little bit hoarse uh i've had a
little bit of a cold nothing serious
nothing covid related um but i had some
training to deliver last week and and so
i spent a good kind of 15 hours just
talking while i had a sore throat and
it's ruined my voice a little bit
um but anyway we'll be fine i feel fine
today
um good so yeah my name is joe depoe i'm
part of the field engineering team for
uh with neo4j in london uh so i don't
sound british i'm not i'm american by
birth
but i've lived in the uk for about 14
years now and i've been with neo4j for
about four and a half years
um so i work in the field team i do a
lot of pre-sales but um as a kind of a
side thing i love making demos i i love
playing with neo4j i love making graphs
and so i'm pleased to be here with you
today
cool
cool welcome joe thank you for
for for doing this and welcome all again
if you if you are watching this live let
us know in chat
uh where you're watching from uh and um
yeah what what excites you about graphs
maybe as well
um
yeah this this segment is is kind of our
our um showcase of of how much fun and
how quickly you can get started with
neo4j and
um especially with neo4j
or db3 which is not is our
obviously free offering of our database
as a service
cloud
yeah
with neo4j so i i think that's that's
that's the goal of it i'll i'll quickly
go over
um what what neo4j or db3 is exactly and
what we're going to do today
hi bench from from the uk
nice nice for you to join today thanks
and then we'll dive in right away in in
some
some data sets so uh
let me share my screen here
and obviously get rid of this one and
here we go
all right
so uh
what what is a neo4j already be free so
it's it's a free version of neo4j or db
which you can i'll post a link in chat
after afterwards
which has which comes in a couple of
tiers so you have the free version
obviously
a professional edition and a enterprise
edition
um so they they differ in in sizing but
generally the free version offers
50 000 nodes and 170 000 relationships
which you can use in your data set
um you get access to uh obviously neo4j
browser but also neo4j bloom which is
our visualization tool and joe hinted at
it in our little
um you know pre-stream uh talk that we
will indeed be showing bloom today so
you see that as well
it's gonna be free forever so that's i
think the major difference between
what used to be or sandbox still is
available but the the sandbox is is
terminating automatically after three or
seven days depending uh if you um
prolong it or not
this is staying with you forever so you
don't have to worry about the data being
gone or the the
you know your instance being deleted
um
get to that landing page i'll post a
link in chat um
afterwards so that's that's to be easier
for you
um
but yeah let's get going today this
week's topic is
pokemon so i'm very excited about that
i'm honestly i'm
you know you might have seen the stream
i didn't about a year ago
on video games and steam so i am
obviously playing video games but
i must admit in this this here now
stream i admit i never played a pokemon
game i i watched the
the animes uh or the cartoons kind of in
i don't know late 90s early 2000s or
something but i never i never
i never watched i never played a
a pokemon game so
i'm not
not an expert on the topic but that
doesn't
matter i guess
joe is the expert here
you'll learn a lot you'll learn a lot
about pokemon at the next hour
yeah so uh i i i've been into pokemon um
i'm not a pokemon fanatic but um i got
into pokemon uh around the same time
that you mentioned alex like in the late
90s
um my i'm the oldest uh
of all my siblings and my youngest
brothers um is about 20 years younger
than me uh they're about
um and so when he was a young boy he was
really into pokemon and it was a good
way for us to bond
um so you know i like to play video
games as well i like to play board games
and so um it was you know no big leap
for me to start collecting pokemon cards
and playing pokemon on my game boys and
stuff like that so that's how i got into
it was as a way to kind of bond with my
younger brother
uh and he would come visit me and when i
lived in new york city he would come
stay with me and we would go to the
pokemon center there and we would play
pokemon together and
uh it was just uh good fun and so i've
kind of
stayed with it through the years i guess
and um
so a while ago i
wrote a series of blog posts uh here at
neo4j we like to say graphs are
everywhere
and so i wanted to take that idea and
kind of run with it right and like okay
where like
where are graphs really so i did a
series of blog posts like i wrote about
i made a graph of the roots that i
walked my dog in the morning
i made a graph of like rupaul's drag
race you know just like anything i could
think of uh okay we can graph that no
worries right yes
um so i made this this pokemon graph um
uh which is what i want to share with
you today i guess uh let's dive in and
have a look
um yeah but it's it's it's while you get
set up i think it's it's always
astonishing when you think about what
what what can be made into a graph or
what actually is a graph where we don't
think about it and then if you just
spend a little time thinking of it and
then you
you realize
almost immediately that that it that
this could be a graph and that could be
a graph and here like you say i mean
walking your dog around
is is probably the
the comes back to the root of all of
graph with with euler's uh
seven bridges of koenigsberg problem but
but still i mean
everything's connected especially
nowadays and you know it makes so much
sense to to think of this in this way so
yeah it's it's uh
it's pretty obvious
absolutely and it was a really fun
exercise writing that that um series of
blog posts yeah yeah you know it's uh
it i get i got a lot of really
interesting feedback from it as well um
people would say to me
uh
well like colleagues would say to me
like my kids understand what i do now
because you wrote this blog post
yeah you know people people will message
me and say oh i get i understand graphs
now because i saw this like rupaul's
drag race graph um so it was kind of a
really interesting way of you know not
just me having a bit of fun and and um
you know extolling the virtues of neo4j
but putting graphs into into a context
that um
a lot of people would understand right
whereas normally kind of in my day job i
work with banks or government agencies
let's let's poke him on more more
financial stuff but but obviously
that's what i mean obviously you could
you could you could spin this around
right i mean i i know that these this at
least the trading card games of pokemon
can be worth considerate money so i
guess it it's coming down to it again
but
yeah but you need you need uh and yeah i
think you need a tangible example and
then once you see it it cannot be unseen
uh so so kind of like this is this is
the graph
baseline i think
absolutely
cool so uh what i have here is
the new this is the neo4j browser
we talked about bloom a little bit
earlier and i can show some examples in
bloom but for right now i'm going to
start with
the the neo4j browser this is a
developer-focused interface that ships
with every version of neo4j and is
available um by default with uh aura
free or db free um right now what we're
looking at is the the schema for lack of
a better word or the metagraph i might
call it um
this describes how the data in my graph
is connected
uh not necessarily how it has to be it's
not like a schema you might be used to
in another
type of database where you know you're
enforcing that the data has to be a
certain way
instead this just describes how my data
is connected
uh you can see here in pink we have um
pokemon which kind of is the center of
this particular data set
uh pokemon can evolve into other pokemon
uh pokemon come from a particular
generation so that you know there's been
decades of pokemon now and so we
classify pokemon by the generation of
um games or whatever that they were
introduced in
um pokemon can have an ability
uh this these are like special abilities
that pokemon have right uh and it's kind
of dependent on the pokemon itself and
and its type
uh which i guess brings me onto type
here so pokemon can be of a certain type
or have more than one type um
and that influences what moves they can
learn and what their vulnerabilities are
so this is how we start understanding
how you know we'll look at like a team
of pokemon or a collection of pokemon
that you might be playing with and what
they're weak against and how you can
optimize a team to go up against
different um different enemies or
different uh rivals
pokemon can also know moves so these are
different from abilities abilities or
like these like super moves um you know
very powerful attacks uh or sometimes
they can heal you or whatever right they
don't just have to be an attack
um
moves uh are kind of more basic attacks
that you would use in a
step by step in combat
and then i've shown um so i built this
data set when i was playing um pokemon
sword and shield uh there's new
kind of very new pokemon games that have
just come out uh brilliant diamond and
shining pearl which i haven't played yet
they're on my to-do list once i beat
metroid and halo
um
but
this data set actually covers those
shame
sorry do you have a pile of shame i do
it's a massive pile of shame oh my
goodness
you know it like if i wasn't so addicted
to animal crossing i could get through
that pile of shame so much faster
but i haven't yet come on to graphing uh
animal crossing like that that will be
an undertaking but i'll find a way
so i built this this team in uh sword
and shield
and and i kind of graphed what the team
looked like at the time um what moves i
had taught them and what abilities they
had so we can drill into more specific
examples rather than just looking at
like generic sets of pokemon
um
for pokemon and and their type
we have this against relationship that
shows
basically the effectiveness of moves of
a particular type
against a pokemon and this can range
from like being immune
uh all the way up to like very
vulnerable to and so on this against
relationship there's a basically a
modifier like a float that says
an attack of this type against this
pokemon is modified by this number right
so if you were
uh highly
resistant to very resistant to you might
you might just get a quarter of the
damage whereas if you're uh very
vulnerable to a particular attack it
could be like a modifier four
and so just to make it easier to
visualize in this interface i broke out
each one of those
um to say a particular pokemon is immune
to a particular type or very resistant
to or whatever
so this is this is our
data model you can see it's
over here on the left we see some
details about
the counts in our graph so we can see
that there's only just under 2 000 nodes
in this graph and uh just under 62 000
relationships among them
uh so this is a
pretty small graph in neo4j terms but it
fits very comfortably
into
an aura free
or a db free instance
and i think this data set i just cobbled
together from
i found some data on kaggle and like
someone had published some of this to
csvs and github
and then i
uh i think i also scraped some
information from um the pokemon database
which you can see here which is like a
really extensive uh
source of data about all things pokemon
so that's our
data set there's a number of properties
here that we you know we'll kind of
explore
as we as we go through some examples
uh but does does that make sense alex
are you already becoming enlightened
about uh about pokemon yeah uh i think
that does make sense
um i um
i i yeah i think that is that is a
good start i think it's particularly
the uh i could imagine knowing which i
mean obviously i guess a pro knows knows
this by heart but like for myself i
don't know much about these uh
these different types so i guess it
could be interesting to know okay
which pokemon is good against which
other pokemon
um
yeah
exactly and later on i have an example
of what we'll kind of analyze my team
and see what its weaknesses are and then
you know as i wrote in the blog post
you know we can see what the what the
weak spots of my team are because it's
not really a very diverse well-balanced
team at least not at the point that i
took this snapshot
um and then how you know maybe how we
can analyze
filling that gap so yeah there's a lot
of interesting things you could do
i could even see building a
recommendation engine on top of this
right yeah i'm going up against this
boss and so i need to bring these
pokemon with these moves
yeah cool
so
um
before we switch over to bloom we can
just take a look at
some basic queries here so
um this is the cipher for matching a
particular pokemon so this was the
pokemon that i chose as my starter uh
his name is grooky
um we and we can just get some basic
information about kooky so um what
generation is from what type um
evolves from can have these sorts of
things so we're matching particular
relationships and just exploring a
little bit around this particular
pokemon
so we can see here
this is
grooky uh
wacky evolves from grookie so in the
next
cookie's kind of the first most basic
form of the pokemon and then when it
reaches a certain level and certain
criteria are met
grookie will evolve
and then
it can even evolve beyond that right
perhaps um
so grouchy can have these two abilities
grassy surge and overgrow
grouki is a grass pokemon
it's from generation eight
so a very recent addition to the pokedex
uh so yeah that's some basic information
about cookie right and this is just to
give us a little bit of flavor for
cipher if you're not familiar with
cipher before we switch over to bloom
because bloom is um we'll take us away
from cypher and
make it a little easier to explore the
data without having to know
the query language necessarily
uh we can explore a little bit more
about
groukie's
vulnerabilities and strengths so here in
orange are all the different types of
attacks there might be different moves
there might be
ah there's creepy this is how it looks
good
yeah just in case anybody was wondering
so this is this is cookie you can see
he's very cute that's why i choose
cookie as my starter pokemon
so
here's all the um
the different
types of moves that there can be right
so these are also types of pokemon but
um pokemon have types of moves and that
defines their
strengths and weaknesses against them
right so
uh for example because grooky is a grass
pokemon
uh
we can see that because has the
type of grass uh if we look at
um grass moves against grookey there's a
modifier of 0.5 so he's uh
resistant to grass moves right um so if
you
had a grass move against uh greeky and
say it was going to do 10 damage
that he would only take five right so
this is how we work out
um the strengths and weaknesses and how
we can understand
which moves would be more or less
effective against grooky or conversely
if was going into battle
we would want to put kooky into battle
against pokemon who would probably use
moves that
the cookie was resistant to right so we
have normal vulnerability against dragon
um he's weak against poison
and so this is how we can start to
understand how we would um
maybe mix into a team or what
types of battles
they would be most effective in
and then we'll we can take a look at all
the available moves for kooky so again
we're starting by matching groukie we're
following the can no relationship out to
moves and then we want to understand the
types of those moves
i'll expand this out because it's a
little bit uh a little crowded so again
here's grooky and blue we have all the
different moves that greeky can learn
and then we have the types of all of
those moves so normally because is
a grass pokemon you would expect
uh they would know
grass
moves and then most pokemon can also
learn a number of normal moves which are
kind of unclassified right when you say
moves is kind of like a like a skill
like uh yeah that's a good way of
putting it yet because often they would
be an attack but not always like for
example
rest
is not it's not an attack it's uh it's
a heel it's a buff okay yeah yeah
so these would then be in in damage you
would kind of like in in in battle you
would you would choose what kind of
skill move you you you wanna you wanna
execute and then
he's doing it against the
the opposite uh pokemon
yes yeah
and this is the full range of moves that
grookie can know uh not always
from the get-go like some of these you
you need to have a particular item that
will teach you a move
or maybe other conditions need to be met
before google can learn these moves um
but a pokemon
as you put a pokemon into your team like
an instance of a pokemon that says
actually yours and your team and you can
name and you own
uh they can only know four moves at a
time
um so you have to choose which four
you're gonna
use for them right uh out of this this
whole list and so that's where some of
the
uh team building aspects come in right
you know
it would make sense for grooky to know
mostly grass moves because that's their
category but you might want to throw in
some
moves from another type so that he can
you can be more effective against
various types of pokemon so this is
really where the art and kind of yeah
building a team comes in right
yeah
and you i guess you balance it across
your other
uh your other pokemon you have in in
your in your roster and kind of like say
okay this is
this skill or move is is is is good for
this pokemon so i can i can use them
with only this type because i have this
other one that can kind of like act more
as a
support character or more like a defense
exactly
yeah
and we'll take a look at the team that i
built a roster was a good word that you
used uh we'll take a look at kind of how
i how i built that team and what they
might be strong against are weak against
and stuff but yeah that's where
the fun really comes in is collecting
all the different pokemon and sometimes
you can only get to
various parts of the world
when you have certain types of moves
because maybe you're going to an area
where there's going to be a lot of water
pokemon and so you need to make sure you
have moves that will be effective
against them and that your team is
less vulnerable to their attacks and so
you want to make sure you have lots of
different pokemon
because you have your immediate team
that's kind of with you but then you
have a lot of other pokemon in storage
right so
uh
the idea is that you got to collect them
all right that's the slogan
um and
you know the more pokemon you have the
more diverse you can make your teams and
the more effective you can be so
that's where the
uh the kind of collecting and team
building aspects really come in
uh cool
so uh
let's take a look
at um
at bloom
uh and we'll show my team so this is a
query that i built in advance
bloom has lots of customization features
that you can build in and one of them is
the ability to use search phrases
so as um as someone who knows cypher uh
i can write these
kind of more advanced queries that i
know someone is going to use more
frequently and put them behind a very
simple search phrase so here i define
this query as show my team
and it calls all this all this
information back without um without me
having to
type the cipher for it every time
so what we see here
um
these kind of
grayish brownish nodes these are my team
members so these are specific pokemon
that i've collected and i've named and
i've nurtured
we can see
for example here we have glurak uh is
the name i gave them char it's a
charizard they evolved from charmeleon
they have evolved from charmander
in red here are the moves that this
particular pokemon
knows at this at this time uh
they're all fire moves so there's flame
thrower there's fire spin there's flare
blitz and there's blast burn
so uh charizard if you know from the
from the uh anime from the cartoons or
um
from the games is a like a big dragon
pokemon super super strong with fire and
so i went all in with fire on that
particular pokemon
uh let's see
i have uh
an homage to sparkle horse
uh who's um
got some psychic moves
uh
where's
my cookie so
uh i'm probably dating myself here but
there was a a cartoon in the 80s called
monchichi
uh alex i don't know if you ever heard
of it
uh i i think i heard the name um it's
these are these little um
black furry things is that is that what
it is i haven't heard something exactly
i'm not sure is
that what it is okay yeah and they look
a lot like when i saw grookie i thought
oh it looks like a monchic so
um i called the manchuchi they live in
trees and um
yeah i don't know they weren't quite um
monkeys or primates but they kind of
look like it but anyway that's
uh rather than just call him grooky or
whatever i thought i have a picture i'll
give him a clever name yeah i thought
you maybe you could want to put one up
as well yeah
let me quickly get that in here we go
there we go
they were super popular when i was a kid
at least in america but i'm dating
myself i'm a child of the 80s
um so uh he
uh mochichi evolved from
uh well he is abrilla boom he evolved
from thuraki and as we saw twaki can
evolve from cookie
he knows
uh drum beating which was a fantastic
attack uh grass pledge and frenzy plant
which are all grass type moves and then
he also knows false swipe which is a
normal move
and he has the overgrow ability
so this is how i mapped out my team um
you know we could see that there's um
uh
let's see he uh
called appleton
uh is a dragon pokemon
i have um
no is he
where is the is
this pokemon appleton yeah which is
dragon so i've got a pretty good mix of
moves right i've got some psychics some
fairies some normal some ground some
steel some fire
um and this is just a snapshot of my
team as it was i think this was pretty
close to the end of um when i was
playing pokemon
uh just to give
a little bit more of a tour of bloom if
you haven't seen it before
here on the right is where i've defined
some of the attributes of the graph that
we're viewing so i've given all of our
nodes an icon to help us be able to
visually identify them a little bit more
clearly
it's quite useful you know if you have
business users and they're viewing
complex graphs it's nice to have
everything kind of color coded with an
icon to make it a little easier to
to know what's going on
i've also
if we
maybe expand out a little bit
um
uh
i need to know sparkle horse is
a rapidash
uh if we want to know
uh rapidash's weaknesses for example i
can pull back these against
relationships and we start to see
links between rapidash and different
pokemon types right and i've also color
coded those
uh
bloom has some data-driven styling
rule-based styling
so on the against relationships i've
defined
um
using that multiplier
weight basically it's a relationship
weight
um
some color and sizing options so
basically
uh if you have a low
uh so zero zero
is the low end of that range and four is
the high end of that range so i've kind
of red amber green color-coded
uh weaknesses and i've also made it so
that
um the the lower end like more towards
immunity over um
uh like having no weakness right um
is a thinner line and then we have a
thicker line at the other end so this is
also quite useful you can do this with
nodes as well as relationships and it's
a good way again of adding
more
uh visual information into your
into your
graph as you see it in bloom whereas you
know i can kind of hover over each one
of these and see the multiplier
i can drill into these relationships and
see more detail
but just at a glance i can see here you
know rapid dash
the green means
better
from his point of view at least
so
yellow
and then ultimately red would be more
vulnerability so it's just another way
of putting more
easily identify
identifiable information right into the
visualization
that's pretty cool then you can
yeah easily see what the what did uh and
like like we just discussed earlier
this is done where it could be
interesting to see
which which which pokemon is good
against which other one and then you
have a with the color coding you don't
even have to look at the
at the list as as much because it's the
case there's a thick red arrow that
tells me okay this is this is good
that's exactly it yeah
yeah
so um i'll pull back a bit more
uh so this is all the pokemon that i
have in my team and all their um
vulnerabilities and so you can see
there's only a few
where it's you know really
um
uh
really red
so charizard is highly vulnerable to
rock
so there's not a lot of massive
vulnerabilities in my team but they're
uh the yellows represent some
vulnerability right so um
i think my team is quite skewed we can
drill into a tabular view of this in a
little bit
my team is quite skewed in one direction
and so if i were to go up against
certain types of pokemon i'd need to
probably modify that
i can do um
so you can do text free text search so
here like i said i know that there's a
pokemon in my team called montichi i can
start typing bloom will auto suggest
results for me so it's suggested that i
might be looking for this team member
monchichi
so this is how i can start exploring the
graph without needing cipher at all
right you can just start doing free text
search
i can expand the whole graph around
mochi g and start understanding
what it's directly connected to so
it's urilla boom here are the moves i
know
it has overgrow it has
drum beating i could drill into willow
boom a little bit more
there we go
we can drill into by double clicking we
can drill into
individual nodes you can see there's
quite a few properties on this node
a lot of this is what i then expanded
out into the graph right so here
these are all kind of columns in the csv
uh that show
you know uh against fire
uh well fire against this pokemon would
be a double damage grass would be half
damage and so this is what i then
exploded out into the relationships to
um particular nodes because this isn't a
very graphy view right this is a
this would be a relational view where
we're trying to match foreign keys and
things like that right so this was my
starting point for creating the graph
we can see this is pokemon number 812 in
our pokedex which is quite useful if you
want to cross-reference the pokemon db
and drill into more information
and then there's some
scores uh around how many hit points or
health points this pokemon might have
um it evolves from number 811 which is
uh how i expended that relationship out
there's some
defense and attack scores uh which
basically roll up into this
um
base total which is uh kind of a proxy
for the overall
um power of this pokemon right so we
we have one number that represents
whether this is a super powerful pokemon
or maybe a um
a more basic pokemon right so the higher
this number the better
cool so
now let's take a look at um
what we're going to do is aggregate up
so for every pokemon that i had in my
team
we're going to take a look at
all the against relationships and then
we're going to sum up all the
multipliers by type
so this allows us to get a view of by
all the different types of attacks
what's the aggregate of my team's
multipliers and so a lower number would
mean that my team takes less damage from
those types of attacks
as a whole team
and a higher number means that my team
on the whole is is very vulnerable to
these sorts of attacks
and we do this in the browser because
we're getting a tabular view back we're
we're returning
um
kind of columnar results um and so bloom
isn't as well suited to that because
it's uh it's for graph visualization and
exploration
we can see here uh
my team
uh in aggregate
has a 10.5 total
uh modifier for ice attacks so
this means my team is highly vulnerable
to ice attacks right
followed by rock also being quite high
if we look at the bottom end you can see
grass attacks my team is is very
resistant to these right so this kind of
means that my team is probably very
stacked
in in one direction right so if i go up
against grass uh or steel pokemon i
probably have a pretty good chance of
being victorious
if i go up against uh ice or rock
pokemon probably less so right so if i
wanted to balance my team a little bit
maybe explore a new area maybe go up
against a new
um
in a new champion uh who fights with
different kind of pokemon at a different
gym
then i would need to balance my team
accordingly
and uh i don't think i copied it over
as i was preparing for this but i do
have
um
a query that can help me choose
how i might add a different pokemon into
the mix here right so
um what i'm looking for are pokemon that
are resistant to rock
and ice moves so one pokemon that's
resistant to both ice and rock moves and
i had done some previous exploration
before this to know that there's no
pokemon that are immune to them
both right uh and what i do is i return
the pokemon name and and that base total
property which is again this kind of
proxy for how powerful the pokemon is
uh
and what i find is these pokemon here so
um metagross
has a base
um a base stat of 700 so
this pokemon is resistant to both ice
and rock and is the most powerful one
that's in the list
and so i might want to add
um this particular pokemon to my roster
to mix it up a little bit and to try to
get rid of some of that vulnerability
that i've seen to rock and ice pokemon
so
but it doesn't give you the
type right so you
you but you could be could add that
right i mean
yeah or i i think what i'll do now uh so
i can
uh start
uh
hmm where is metagross
maybe i don't have an index on
querying on the fly
uh
what i want is what did i return the
yeah the pokemon name
yeah so here's metagross
i might um
bloom needs an index on that field to do
the free text search and i might not
have applied it in next to it
so we can see here's
metagross here's
the abilities that metagross
can have
it lost from this pokemon
uh and it is
where is my
oh so as a bonus it's immune to poison
yeah
that's handy
yeah it could be absolutely
cool so i i think um do we have some
questions
uh i i can only see one from
from skanda on the uh if aura can handle
20 000 db read write request at a time
uh that doesn't necessarily reflect us
we talked about aura or db freeze
limitations which are
which are um
which are 170 000
relationships and 50 000 no's
if you go beyond the the limitations of
free you can you can choose professional
or or enterprise and then obviously you
have no limits
and
but i mean even for 50 000 you can you
can do
20 000 db write
reads and writes
at a time so
that's surely possible
how how are your experiences with with
auradb
um joe
yeah very good i mean there's there's a
lot that happens behind the covers um
that uh
you don't you know because it's a
platform as a service you don't really
need to
think about things like the clustering
that happens behind it right like uh
there
there is a cluster that sits behind it
um but you don't because you're not
administering it you don't really need
to worry so much about how that happens
right we take care of the scalability we
take care of making sure that it's
durable if the cluster goes down itself
heals
uh and so all the sorts of things that
you would expect from
uh you know regular operational system
you get from or a db
uh and so because neo4j
in general can handle those query loads
so can aura right but without you having
to necessarily worry about the cluster
topology because we take care of that
for you
uh it might be now might be a good time
to switch over and show
a little bit of information about the
the interface the console for aura and
how i set this database up
good idea yeah
um so this is my pokemon database you
can see it's running in the free tier
um
this gives me some information about the
this particular
database instance
so this is my connection url um i can
see it's running in
the
europe west one region in belgium
so i think this particular instance is
running on google cloud
uh it's running the neo4j version four
and again
uh aura is kept up to date
um you know without you necessarily
having to worry about the details of
applying patches and things like that
right so i just know it's running
version four
uh the latest version um
that's available on aura um
i can see
this has
1971 nodes which matches up against what
i saw on the browser uh and that's four
percent of my 50 000 total right so when
you're using or free this is a good way
of keeping track of your usage uh and
your caps again i'm using 35 of my
available relationships
there's some connection information here
so
um you you would normally i'm using the
browser but you can also communicate
with your oridb instance using
one of the drivers for neo4j
uh over the bolt protocol and so here
are some connection details you know if
i was using python here's some
code that i could use to connect
uh some sample codes use that to connect
to my uh or instance there's javascript
examples java and so on
um you can control snapshots so i i took
a backup of this database earlier this
morning
i can see that this uh you know there's
a snapshot from 906 am gmt on the 6th of
december
i could restore my database from that
backup
and so
again you know being a complete
platform as a service operating offering
there's options for backing up your data
for restoring your data from managing
that
through this console
and then there's a few uh
options in the setting i could clone
this
database into another database which
would be quite handy if you you know you
want to iterate uh
you know
maybe extend a particular copy without
modifying the one that you had before
or when i'm done with this database i
can drop the database i can um delete it
here which would be a permanent thing
you can
choose to open so this would be this
opens an automatic connection um to you
know without having to type a url and
copy this connection uri i can open
browser and bloom
right from here
and then there's some options for
importing um so i didn't use a dump file
you can see here there's some other
instructions for importing
i had this database already running in
neo4j desktop locally on my laptop
and so what i did was
follow these steps
there's basically a command line
interface built into desktop if you're
familiar with the linux command line
it'll it'll feel very natural
there's this neo4j admin tool
available desktop that comes with this
push the cloud option and i use that
which basically took
my local database that was running
pokemon and pushed it into this aura
instance
so that's how i did my uh my data
migration
and that does that right that's very
very cool i think that's that's super
handy to do
this do you are you aware of any any
limitations so let's say i run an old
desktop database on i don't know let's
say 3.5
would that still work or do i need to be
on four to
or don't you know i mean
yeah
because because
because aura runs version four yeah
um you couldn't push a version 3.5
database into aura
so your database needs to be compatible
with the four series and and they're you
know migrating from 3.5 to 4.00 there's
some changes that happen in the file
store and so on so uh
you
i don't think there's any tooling built
into aura to handle that update for you
but there is tooling built into the
neo4j desktop edition so if you do have
a 3.5 or or whatever version of uh your
database there's tools in desktop to do
that upgrade for you and then once
you've done the upgrade you can push
that version 4 into orig or atp okay
good
so yeah
check check your versions
uh yeah absolutely
but you know at this point
version 3.5 is quite old right version
3.5 is like a year and a half old it's
reaching the end of its um long-term
support window
um so if you are running anything on
version 3.5 i would urge you to to do
the upgrade because we're
i mean we're almost at the point where
we're going to be thinking about version
five right yeah
fallout 4 just launched last week so
uh and i think that's gonna be probably
the last last four four dot x major
release i i think so yeah
excellent and i i can see that our
colleague john kennedy um
has joined the conversation and he's
corrected me so
it is possible to upgrade a 3-5 version
or a db free and it will update it to
the laser the latest version 4 so you
don't even have to do it yourself in
desktop
so thanks john i i learned something
today
cool thank you john yeah that's
that's very good to know so that's even
easier than you don't have to
say anything right so that's good
and this is very very step-by-step easy
easy easy mode so
um
yeah
yeah and it just um
you know i i like desktop i use desktop
a lot as well um you know it's a good
place to
um
to do your data loading and and all that
stuff locally and then kind of push it
to the cloud
uh you know when you're ready and then
go go from there right um it was just a
nice uh a nice workflow for me
personally
uh excellent uh
i i had a few other queries i mean we
can see um
this was
uh
kind of my team and its um
evolutions how i evolved it
uh again
i usually would start with the most the
more basic pokemon and involve them
myself um especially in the earlier
stages of the game before you can go out
and capture these more advanced of you
know fully evolved pokemon
um
so i
i i want to say i probably
close to 100 hours into pokemon yeah
which is a respectable amount you know
it is it is
i was i was shocked and appalled
actually because i do play a lot of
animal crossing and i had like animal
crossing was an absolute savior during
lockdown
and i was looking the other day is it
friends for virtually
have them run to your house
it was really good um
but i was looking the other day because
i just got back into it they just
released um
a whole new bunch of content there was a
big drop earlier in november
and i was looking at my stats and i've
played almost a thousand hours of animal
crossing wow like 905 hours and i so i
asked siri hey siri how many days is 905
hours and it turns out it's over it's
almost 38 days
so if i played animal crossing straight
for over a month with no sleep yeah i
could achieve the same things
in the last two years it's pretty
shocking
but it's it's
it's a it looks like a fun game so
and i i guess i think you can dump uh a
lot lots of time and and effort in it so
i think it's really yeah
you know there's no no shame in that
no i mean everyone needs a hobby right
exactly no that's mine
know for sure and i get it it's uh it's
you know um
after after
there's nothing to do right and then you
just spend it
with something that is fun and then uh
you know you log on on friday and then
you realize oh it's sunday already
yeah
yeah it's and it's you know it's the
same for me with pokemon or any of these
kind of games right like um i can get
really into them and spend um a lot of
time in them right but it um
for me it feels uh it always feels a
little bit better i guess doing that
than bingeing on a
on a program on netflix or something
like that right like if it feels
interactive
yeah yeah i like spending my time that
way but
and then i get to i get to build graphs
of them afterwards
excellent
so i think that's um that's pretty much
everything that i prepared in terms of
uh visualization and data exploration
about pokemon
uh
as i said there's um
because the latest pokemon games don't
create a new generation
this data is still
valid the the two new pokemon games are
actually remakes of older pokemon games
diamond and pearl
so actually they only reference
the first four generations with the
pokemon is my understanding
okay so it's even a little more uh basic
than some of the stuff we looked at
today but there's still a lot of room i
think for
being able to explore this right and it
is a pretty small data set but there's
some neat stuff you could do in terms of
team building analyzing which pokemon
are the most similar to each other based
on on their moves
uh you know finding communities of
pokemon that might not be obvious just
by aligning their individual
types and stuff so
as i said i think i got some of this
data from kaggle so obviously there's uh
i'm not the only person in the world
who's thinking about how to how to
analyze these data sets and uh and and
do fun stuff with them so
definitely did you by the way did you
use it you use the data set to find a
pokemon that that completes your your
your team and then did you
did you add a new team member to your to
your group for the final stretch of the
game or
i don't i don't recall i mean this this
was part of that whole exercise actually
it was this uh this recommendation here
of this particular pokemon but um the
catches then you have to go find them
right you have to yeah or you have to
evolve them from uh from the very very
beginning so i don't know that i had um
these top ones um but this that was kind
of what i was trying to do
uh as part of this exercise here was
like well look at here's my team and
it's actually very weak against these um
these classes of pokemon and so what can
i do about that right yeah um but it's
been a while now since i played um sword
and shield so i can't really remember
how my team grew after this okay yeah no
no problem
um and then i guess you'll like i said
in the beginning you look forward to the
to the new game and um with that data
set i guess even
because
did i understand this correctly the new
game is is you can even
even use that data set with the new game
and find out
how your um
how your group is working or if who is
powerful or strong against uh
or weak against other pokemon
yeah exactly so um
uh
because that game these games um support
generations one through
four
uh so i could
uh if i take out maybe
uh
so it at least as per this data set and
i'm assuming it's correct
um
these are the pokemon there's 493
pokemon that would be available
roughly in these
new games because it's from generation
one through four
um
so i could you know do the same things
as i did before and you know identifying
which pokemon are stronger weak against
what uh and and build my team and using
the same approach just not using all
all the generations of pokemon basically
yeah yeah okay unless
that's super good then it makes it even
for anybody that's out now for the
christmas break playing playing the new
pokemon game and wants to make the
perfect team
up upload that data set into your into
your free instance and then you
can uh
you know
make it better
end this one right as if you weren't
spending enough time on pokemon already
now you can do deep analysis
you can pretend you're doing this for
work
i you know i'm very lucky i did get to
do it for work
and i should let me see if i can get
armstrong to come make an appearance
[Music]
armstrong is joe's dog
that's good yeah he's uh he's shy today
my real life pokemon here he comes nice
come here
come on
so here's what he is
he usually makes an appearance when i do
any kind of a recording
he's a cute little dog he's a good boy
and he is uh he is somewhat of as alex
was saying an office mascot uh
when he's when he's able he loves going
in to visit his friends from neo4j
dressing dressing up in silly outfits
and going into work
super cool
well i think with that uh we we are
at the end of of today's today's session
um
anything you wanted to add john uh joe
sorry
no i i i don't think so this has been
fun thank you for inviting me i hope um
that this kind of light-hearted take
on graphs in a different domain has been
uh interesting for for
the other people who have joined i hope
it's been a useful
introduction to um
or free and uh bloom
uh yeah and it's it's pretty easy to
find me um there aren't many joe depos
in the world
um i'm you know i'm on linkedin i'm on
twitter uh in fact uh there were some
tweets about this this morning
um so if anyone wants to carry on the
conversation about pokemon and graphs
uh i would love for people to reach out
to me i'm always happy to
to get into a lot more geeky detail
about this kind of thing
yeah i'll post your twitter handle in
chat so you can
follow joe there
uh yeah thank you all for watching i
hope this was uh interesting and worth
your of your time um we will be back
next week um actually we will be back
later this week uh on on wednesday with
a special stream on improving news
recommendations with cloudflare workers
and knowledge graphs
uh from will will line our colleague
so that's happening on wednesday you can
already subs
set a reminder on youtube um but we will
be there
um
wednesday afternoon european time
um yeah and with that thank you joe
again for for joining today and for
showing this this cool uh
this cool pokegraph um
and uh yeah see you next time see you