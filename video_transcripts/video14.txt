covering neo4j aura 3 with lew and
alexander is is today's topic and
you know uh going over the plan a little
bit is is what's happening so i guess if
you regular you know what's what's
coming but if you're not then um you
know a quick recap we want to go into
what neo4j aura 3 is what what it
actually means uh to to do um to work on
neo4j aura free
uh we're going to pick a data set uh
honestly i don't know what data what
data set do we
have so
we have
um so it's an interesting one let me
bring up the
oh two seconds so i'm gonna drop a link
in the chat so
there's uh christina escalante who we
work a lot with oh i can't send a
message in the chat so i'm gonna have to
pop it in our private chat and alex is
gonna pass it over sorry still getting
set up when you apologize
so
because this is music data so it's
resonated
and so from what i understand about it
it's one of these streaming services
whereas of uh equitable funding so
you buy socks
songs is a bit fairer with money and
what christina has done is she's put
together some examples
in a
and we're going to be using some api so
this is going to be a void of discovery
for all of us working with this status
this is truly truly new i had a very
quick peek at it last week but
effectively what we've got in here we've
got song tags and titles and that kind
of thing so what we're going to do is
we're going to be having a play with
that having a look see if we can do some
cool things with it i could very easily
see us doing quite a few episodes with
this data set it is a fun data set but
what this does certainly as a first
episode it gives us an opportunity to
have a look at how we can work with some
open apis so whereas previously what
we've been doing we've been using load
csv to get data in this week we're going
to be loading some json data so
yes we're going to do something
different today this is exciting
yes so it is again this is a great
example of being able to see how we can
really quickly get up and running with
aura how we can pull some data and how
we can start querying it and it doesn't
always have to be load to speed we can
use other things too so that's what
we're going to be doing today
that's cool that sounds exciting i'm
looking forward to that
if you have any any other data sets
you'd like us to explore uh we will
continue doing this series until early
september so we have enough another
few sessions to go so until um until
that uh you still have time to to send
us your data sets if you have anything
you want us to to look at please don't
be shy
ideally it should be a csv or not not a
bit we're gonna do json as well maybe it
could be a json as well but it should be
publicly available so um if if we have
to you know register somewhere and get
it somewhere and then it's it's it's
it's not the the goal of this session
but if it's somewhere on a repository
available for everybody to to access
then just ping us that and we can we can
look into it
um yeah so we're gonna pick that data
set so today is gonna be music so that
that's a good topic i think everybody
can can get around that um
we we will then start a little modeling
exercise you know where we where we go
what questions we might ask uh asked to
the data set what kind of queries you
want to run
where do you want to explore this in
which direction we want to go
um so this is this is the the plan for
today
determine the data model of course
um and then see where uh where we land
uh and then obviously loading query uh
get the data into into neo4j aura run
some queries uh and you know you will
see how how quick and how how easy it is
to to get from
basically a table to a graph
with order free within
well no we have started the stream uh
basically now and by the end of the hour
we will have it so in in the remaining
50 minutes or so
what is uh neo4j aura just quickly sorry
yes lou
oh yes i was bringing you something
none
um quickly maybe uh i want to give you a
rundown on what what neo4j aura 3 is so
it's on the right hand side you see here
see a screenshot of it um
it is a neo4j uh database as a service
in the cloud it's it's managed it's a
managed service with elasticity so um
depending on what your uh your what your
demands are what your requirements are
you can you can scale it up and down
obviously uh aura free basically is a
limited um
first step and then if you if you then
decide to to go further with
professional or even further that you
can you can scale it up and down
um
and aura basically will will do lots of
things for you um
that means it's it's
fairly easy for you to to maintain that
so it's it's it's kept up to date so you
don't have to worry about updates about
recent recent versions recent recent
you know
fixes and the like
um it's managing your backups for you so
you also have to worry about that it's
providing a continuous uptime so it
means it's always on
basically um
and um
monitoring is over over seen as well
and all of that is is available on that
link so either if you're watching on
twitch you can just type exclamation
mark aura and then that link will come
otherwise you need to you need to type
that in
dev.neo4j.com and then you you have
you have a page where you can then
register for aura you can
find more information what's what it's
all about
and so forth
so i hope you you you will all do that
uh and especially now if you want to run
along with us today you could also do
that now go go on that page uh start
your neo4j or a free instance
and then continue
doing what we do
in this session today
anything you wanted to add lou
no
sounds fantastic so far
cool
so then a little overview of what neo4j
r3 is uh neo4j or 3 is is the free
obviously the free version of neo4j aura
uh how often can you send neo4j or in
two sentences um
so um you you have a limited uh edition
that that gives you 50 50 000 nodes and
175 000 relationships
so that that's
that's fairly fairly good project size
for for uh for a test run and for for a
development of of you know first project
um you get access to neo4j bloom and
browser so these these tools are
available for you it's going to be free
forever so it's not going to close so
compare it to to sandbox maybe sandbox
closes after seven days maximum
this will stay free forever and keep
keep be kept with you forever
and all you need to do is go on that
landing page um i just mentioned before
and then you are uh ready to go
this is what we're doing today so we are
going to be looking at the resonate data
so
let's talk about christina has put this
together so she this is something she's
looking at so i think we're probably
going to be doing a few of these and i
will try and organize a plug for this
because there's a nice piece of work
that she's doing she's building out an
entire application built off the back of
this so this week what we're going to do
is going to be looking at the data that
she's using to pull all this together so
you've got the link there don't worry
you will have the links
in the youtube video follows after so i
will update that later on in the day so
you'll have all that information
available
so
let's get going and have a look at the
data
so i'm just going to quickly pop the
link in the chat
so
oh yes
sergio is joining us from
the shabano's journey hello
very cool
so this is the repost i'll pop the link
in the chat
and
so you've got the
you've got the links here so you can see
you've got some information about
the
that christina is building so you've got
some information about settings up so
i'm not going to do any of this stuff
we're not going to be
running this stuff i am literally just
interested in this
this bit of information so let's have a
peek at the links here so this is the
resonate page so this is the community
owns music network
so your microphone is a little bit
it's creating some some noise maybe i
don't know maybe are you touching it
maybe
i'll move my hand out the way
that's i think that's better yes thank
you
although now i can't hear you anymore
oh no
no you're back
i couldn't get anything working today um
makes it exciting
that's all right
yeah exactly
get the
so
this is the the resonate website so
you can find all the information about
that
and
yeah so you've got this have basically
got the different services it's showing
the
thing i think you this allows people to
go on as well and share their music and
i think this is this is the resonate
website and they've got a bunch of apis
available as well hello thank you for
joining us
and
yeah so this is the so this is the the
reversal of the airport things you've
got the links embedded within
christina's github page so you can see
all the information there about how you
can look at information
and
the other thing is what might be my
dodgy internet because i'm tethered to
my phone because i was connected to my
laptop you know what let me just quickly
switch my network just in case to make
things a bit better so two seconds
um
oh i can't change my network
i'll get to give it two seconds
hopefully we'll have a better network
and then we'll be in business
right cool
so
well what it attempts to connect to the
better wi-fi in the office
so
yeah so basically
this is what christine's put together
and the bit that i'm really interested
in is this bit here so
i'm i'm going
to be really bad and for some of you
who've been watching
you
may have noticed i've not been
upsetting any constraints of not being
set in setting any indexes
so
so some of the stuff that some of the
magic that's been happening as well for
is they're trying to improve the
experience as well so it tries to guess
some of this stuff so i i'm continuing
this theme of not setting any
constraints
at some point we will but for now i'm
not going to
so let's take this statement here so
this is quite interesting
and what we're going to do is we are
going to
take this statement here and let's have
a look at what's going on in aura
so
i accidentally did control c and then
ctrl c again so
let's copy that
and pop that in so let's have a look at
what's going on here
so this is the
this is the api that we're going to be
calling so you know earlier when alex
was going through alex you're talking
about
you know if you've got a data set that
you want to want us to explore and have
a look at so what we're doing here
is
we've got an open access
api so this is going to request some
data and this we don't need to provide
any authentication which means what we
can do is use
an apoc function called load json so
what we can do here is we could either
specify
a website that's got a load of
jason in there or what we can do as well
we've got here is we can specify a uri
which has got a
you know effectively a link to a a rest
service which doesn't require any
threads and we're going to make a call
to that to pull back some data so what
we can do very quickly is if i copy this
and let's
have a look at what comes back so i'm
going just two seconds whilst i
put this reconstitute this back together
again and obviously this is the other
part so we're concatenating two strings
so we're going to be pulling back is a
playlist
i don't know whose playlist it is
because i think anyway
this is so you can see here we can all
judge somebody's music taste
i think we're bringing back loads of
people's playlists so that's quite
exciting
so
we've got here a
you know playlist
and so we've sort of got track groups
so this is that this is called this is
the the parameter that we're passing so
bring back our playlist and this is all
the data that we're getting so it
doesn't always have to be
csvs for us to load so this is the data
that we're looking at so
we can just have a quick peek at what's
going on so i'm really sorry it's not
been formatted into that beautiful
json up but we can have a quick look at
what we've got so if you've got some
data
so there's an about obviously there's no
information being put in there but we've
got the we've got cover so we've got a
link to it looks like we've got the id
of the person who's created it a display
artist we've got an id
we've got a slog so it describes us the
staff picks this is the staff picks
playlist for august 2021
there may be
tags associated with that for searching
we've got a title stuff pics i got some
information and here if we start
slipping in we can we can see we've got
some information about images we've got
some images different sized images there
we've got the creator id of this
together
so you see one of these this is test and
so forth so you can see you've got loads
of nested information going on in there
within our
json objects there so
we can now what we can do
is let's have a look at this nice bit of
code that's going on so
so you can see here that
uh christine has put a comment here in
this example grabbing the listener
generated playlist so that's what we're
going to be pulling here and what
happens is with the apoc procedures so
you always call them so apot for those
of you who've not come across it before
is a
library of functions and procedures and
the full the full fat version of apoc
has got something like over 400
functions and procedures and you've got
a cut-down version of apoc also
available with neo4j aura so this allows
you to use a lot of these really cool
functions so i'm pretty certain we're
going to be using lots of different
functions as we go on in the stream so
the one that we're going to be using
today is load json so this allows us to
pull back these sort of maps and then we
can pull things out and normally when we
use a an apoc function
we sometimes we want it to bring
something back and we always use this
yield terminology so here we're yielding
the value and that value is going to be
the json objects
so it's effectively going to take all of
this
and when we do yield it's going to chuck
all of that back at us so then what we
need to do is we need to unwind it and
then pull different bits out so that's
what's going on there
so we're going to do that and here we're
unwinding data as data so it's the first
sort of um sort of key value pair that
we've got here is data i think we've
just got the one yeah
so i think
if i just wrap it in
quotes
yeah we've just got one which makes
sense because we always have one for the
root object so we're unwinding that to
break that open and then we'll have all
of those
sort of the the sort of array of
elements in there afterwards
so one thing data and then what we're
going to do here what we're happening so
we know we've got a user object in there
so we know we've got a user and then id
so i think we saw that a bit earlier
didn't we we saw a user in here an id
yeah we did see we could see creator id
and we you use it and a user id so you
can see that
that christina is basically pulling out
the user id and she's merging that so
that's going to that's the equivalent of
an upset so if you recall what merge
does merge goes off and has a look if
this exists if it exists then it treats
it like a match if it doesn't exist it
will create it from you we're doing the
same with track group as well and then
we're merging the idea of a user owns a
track group and then in within that
track group which is always good
practice is you don't want to put all of
the properties when you're doing a merge
into your node what you do is you always
merge on the unique identifier and then
afterwards you can set all of those
properties so here i mean it doesn't
really matter we're setting whether it's
matched or whether it's created doesn't
really matter for the purposes here so
once we've got that that track node
we're then going to be adding the title
the type the slug and the track's
imported false so let's load up that
data and have a look at what it looks
like so we're skipping slightly the the
the thing about creating a
data model this week so it's slightly
different so what we will do when we
come back to this data set
is we'll explore the
apis and see what data is and then we
will come back on that and
then create the data model but for now
we're going to take the fact that
christine has done all of that hard work
for us
some data we're then going to look at
the data model and then we'll think
about what questions we might ask so a
little bit topsy-turvy this week but
it's a fun data set and we're using a
you know brand new way of being able to
pull data
so
we're hopefully going to let us off this
time
what we're going to do next time so if
you've not i'm going to do a cheeky
little
plug as well is that
my other colleague will and i've got a
podcast series that we started graph
stuff and our recent episode that's
going to be coming out soon we talk
about all the different places you can
find data sets so if you can't you know
if you can't think of creating a data
set we talk about all these different
and cool places you can find data sets
including lots of these open sort of
apis that you can pull data from so if
you want to go and have a look and
suggest some data sets then please do so
what have we got that's popped up is
tomasz says you can also handle api key
authorization absolutely and other post
requests with apoc so basically you know
when you have the you can have the
parameterized um key sort of um
authorization that kind of thing yeah
you can also bring those in as well so
if you've got any of those
data sets or apis you want us to play
with then you know do suggest them and
we'll have a look
so
we've put that in so let's have a look
at so far so what we know is we're going
to have a user and a track
recommendation so we can do that thing
called call db visualization
and we're going to see that so we know
that that's nothing it's you know
nothing to surprise us so far
so let's see what else
christina does so we're going to add
some more track groups so again i'm just
going to
take these
and copy them so what we're going to do
here
is yeah we're just adding more so what
we're doing here is we are
calling check groups okay so let's
do that and then we can have a look at
what that sample data looks like too
i did that again
and so we're taking we're taking off the
playlist bit so what's this is so what's
happening here is that obviously you're
going to have more track groups then
you're going to have track groups on the
playlists so what's happening here is
we're just now
pulling back all of the track groups
because obviously we're not they're not
all going to be mentioned in playlists
but we're interested in having a look at
playlists and eventually what happens is
we start taking music genre tags and so
that's why we need the playlist so we
can start to think about if we're making
recommendations and what kind of music
people might want to look at so good fun
so we've loaded in some more data from
there i'm just going to close this i
don't accidentally keep pressing the
wrong buttons
and then what we've got here we're then
going to add some tracks so you've got
the track groups which i believe are
groups to albums i could be wrong i'll
have to double check that but then we're
now going to add tracks to those track
track groups and
let's bring them in and we've got
another apoc
procedure in use as well which is
exciting so we'll talk about this one
quickly
so
this is one of my favorites
apoc
functions which is the periodic commit
and so what this does so sometimes
you can't always
load all of the you know you can't
always execute that this one big block
of cipher
script that you want to do straight away
so sometimes you need to break up in a
certain way so what happens with cipher
when you're running queries is if you've
got like a load of things going on like
you've got loads of merges or you're
pulling in like a big data set or
something like that and you do some
manipulational work with it
sci-fi tries to bring everything into
memory
and then executes it whilst it's all you
know it does all these functions whilst
it's all in memory now
for situations so for example three the
amount of memories is not a huge amount
or
you know
you're working with someone like you
don't want to go off and you know get
like a machine with massive amounts of
memory when actually can be a bit clever
of how you structure your query and many
times we don't necessarily need to have
everything in memory and process it all
at the same time so what we can do
sometimes is just chunk it up and what
apoc periodic commit allows us to do is
it allows us to chunk it up and how we
do the chunking up of our data or the
chunking up of the process that we're
running or the query that we're running
is using limits and
and it doesn't have to be limit you've
got lots of other ways of doing it but
just an example here we're doing it with
limit and obviously as you know this is
going to limit the number of nodes or
lines or things that we're pulling in
and then we
effectively called the periodic commits
in the first part we give it our cipher
query
and then in the other bit the other
parameter we put in we put in the value
for that limit so here we're putting in
the value of 10.
and then how
the april periodic commit knows
that
you know that date's finished doesn't
have to keep going is you always have to
return a count of something and if you
think about what happens when we do this
kind of query it's going to do a match
and at some point there's going to be a
situation where everything's been done
so here we're tracks imported so
remember we said that christina had that
flag earlier where tracks imported was
false so she's setting them as true
going for all of them and at some point
it's going to happen where we're going
to do a match and
this is going to be you know that all
this is going to be none there's zero
and then this is going to eventually
return a count of zero and then it knows
that the procedure knows that it's
finished everything has been done it has
been concluded
so that's that and there's lots of fun
ways that you can use apoc periodic
commits so for example
you you can use it for iterating so if
you're doing like a your sort of home
brew
graph algorithm something like that you
can use it to just to keep iterating
over in fact i think
the summer of notes last year
a used periodic commit to do the table
saw so you know when we're trying to put
guests to tables
you can do that as an example so there's
lots of really fun ways you can use it
so there we go from that we've pulled in
the tracks and then oh we're going to
load in some tags as well so let's do
that too
so we'll do this one and then we'll have
we'll have another look at our data
model and see
how it's growing out so we've added
we've got users we had the
track groups we've added some more track
groups we've now added tracks to those
track groups we're now going to be
adding some tags
so let's continue putting some more data
oh
i just got an error let's just quickly
see what's the problem here i think you
you you didn't start at the top by
copying it over
oh did i miss some stuff let's get rid
of that just in case
oh yes oh yes well spotted well spotted
indeed
very excited to play this data i have to
say
right so that's all put in there so
let's quickly remind ourselves what our
data model looks like
look there we go look at this so we have
extended it so we've got our user a user
creates track the user owns a track
group the track group has a tag
and what have we got here so we are
doing that okay so this is all
connecting to the database so that's
fine so we have loaded our data so this
is our data in here
and we have got so we said i said we've
got the user
use owns track group
track has some tags
it's created so let's look so we're
going to do quickly is let's have a look
at some stats of our data so how many
we've got of each category and then i'm
going to bring back some sample data and
then it's going to be over to all of you
to suggest what questions
this data
so let's quickly do
match
and return
and
labels this this is one of my favorite
queries
i just like
when i spell it correctly it's one of my
favorite
labels and
count star and i just love this because
it just tells me
about a view of what have i got in my
database what data and what's
interesting here is we've got a load of
notes that don't have a label on them so
i'm going to have to be nosy and have a
look at what those are as well
but you can see we've got so we've got
148 users we've got 126 track groups
we've got 103 tracks i suspect this is
going to be related to the tracks got
same numbers and we've got 28 tags so
let's quickly have a look at
those
those ones
where it doesn't have a label so let's
do where
labels
n is equal to i think it's going to
sound like this isn't it
and return stall
so let's have a look at those ones that
don't have a label oh no
where
not
oh where not exists i i can't think of
i'm gonna have to try and figure out how
we i'll have a little think about that
to see this
to
figure out
how to pull out those notes i can't
remember the top of my head the query oh
so ark's joining us on youtube and he's
new to coding
so that's exciting welcome for joining
us in the u.s and it's 3 30 in the
morning oh my god
it's early
thank you for enjoying a suck so
yeah please keep chipping away at the
coding and if you're completely brand
new to neo4j uh do keep an eye on notes
like we've got graph academy got a bunch
of stuff that you can have a look at to
help you get started so thank you for
joining us exactly i'll i'll pop the
link out for you for the graph academy
um which is a perfect way to start
yeah absolutely absolutely
okay so let's have a look at some of
these tags and
in the back of my head i'm gonna figure
out how we're gonna pull up those notes
that don't have labels so i'm just gonna
quickly take this and i think they've
all got name values on them so let me
just have a quick figure yeah so what
name so let's bring back what tags we've
got i'm very excited
and let's do return and
got name
and we're going to order them by name
so let's look at what tags you've got
alternative ambient ambient techno
ambient techno spelled a different way
oh
oh there could be another that could be
actually jumping in my head
dark ambient dark wave down temper dream
pop jerome electric electro pop
electronic electronica
this is interesting because
straight away it's jumping my head i
think so some of these are going to be
very similar but i think some of these
tags are the same they've just been
spelt in a different way so that might
be an interesting question that might
pop up so those are some tags and let's
have a quick look at what other data
we've got in here so let's have a look
at so i think our user we're just going
to have an id on there aren't we
so oh look at this and one's already
coming in with the first questions most
popular artists by tag i love it
we have got let's have a quick look at
what kind of data we've got on track so
tracks if i just click on here we have
got just import oh oh we've got title
that's probably not that was a terrible
one to completely click on so that was
completely by accident but not the most
appropriate title for this time of year
that's right so good
uh so you've got some time to say so
we've got title so not completely here
so
that's the
that sounds like my start to the morning
that was a very appropriate track title
okay so in tracks we've got track titles
and what have we got in track group
let's have a quick peek so we've
obviously when we had a quick peek at
the data we saw
we had things like
the the slug
so obviously that would be it tends to
be the title we have on the page so
we've got ambient evening music that
sounds like something i should be
listening to later on today uh you
obviously got type playlist okay so
you've got some information for
interesting information there so
everyone's shot straight in then
suggested what's the most popular artist
by tag so over to you alex have you got
any thoughts about what kinds of
questions you'd like to ask
can we can we find out who who are
who
which artist is in in the most playlist
represented
oh so what's the most popular artist by
tag
or which song rather maybe the song is
easier which song is in
in in in more than one playlist and
which may be like a popular song that
isn't many playlists
what song is a more than one playlist i
love that and then what's the most
popular song
what's in playlists
yep that could be good
uh arc has suggested
how often although how often do we hold
these cards
exactly yeah so so the good news are is
we do them every week
slightly bad news for you ark is that
they would be at three o'clock three a.m
local time
[Laughter]
we follow up with some more good news is
that the recording is available
immediately afterwards
on youtube
we have got playlists which you discover
or are free so you can you don't have to
watch them all live we do we do put the
recording and we do have a github repo
as well where we also write out what
we've done on the code so if you don't
fancy joining us every week at 3am then
yes sami please do join us so yes we are
we are here every week at 8 00 a.m
utc so we are here every week on monday
at 8 00 am utc so yes please do come and
join us if you've got suggestions for
the notes then please come in so mike
has just asked about the apoc plugin yes
it is available on nifty or it is the
cut down version so not all of the
functions that are in
in apoc are available or but we do have
it on and what you see now on the screen
this is neo4j aura free in use
and you can see the apot functions that
i'm using here so yes it is available
okay so do we have any more questions
for
questions for the days questions in
general are good as well but questions
for the data so
do we have any questions we want to ask
i mean one i'm quite curious yeah
exactly what is your i've got a couple
i've got two
so one of them is i want to know how
many similar named
tags have we got because i noticed a few
of them looked a bit similar and
actually i think we're going to use
another
apoc function for that so i want to know
how many tags are similar
tags are similar and similar is a very
subjective term
how many tags are similar in our data
and the other one that i was quite
interested with as well is
finding about
how many so which tags commonly appear
with other tags so
so things like because if we go back to
our data model let me just scroll back
down again
we have got
this obviously we've got
track group and then a track group has a
tag and that track group is going to
have more than one tag and what i'm
quite keen to know is
are there groups of tags that commonly
appear together so like ambient and
ambient techno for example you know are
there like common groups of tags that
always appear together so we can roughly
query that you know quickly so
do groups of tags appear together
frequently
okay so i think we've got a good set of
questions here so i'm just going to take
a quick cheeky tip of my coffee
which
which uh my colleague alistair the the
the original creator of the arrows app
snuck into the uh room for me so
that's nice
it's very nice of it wasn't it yeah
right so the questions we've got lined
up we have got
what's the most popular artist by tag
we've got what song is in is in more
than one playlist and then a
continuation of the question which is
the most popular song in the playlist
and then we've got how many of the tags
have got similar names and what
groups of tags appear together
frequently
and oh my goodness that there is some
dedication for mark so he's if 3m is
doable and you've been practicing coding
so well done you and congratulations to
me as well being a certified developer
so for those of you who are loving neo4j
we do have a completely free
certification program and for those of
you who are more i don't know whether to
do whether or not it's well worth it
and you also get a t-shirt the t-shirts
definitely worth doing
right so let's get let's get to it let's
answer some of these questions so we've
got the first one the most popular
artist by tag so
we have a quick peek here what's going
on and let me just make this a little
bit more readable so i'm just going to
click on our user and if i select name
just so we can see these certain track
groups you can see it says track
oh this is exciting
oh there is a name
so you can see here so we have got
a user
track group i created track so let's
just check to see
so
what's the most popular artist by tag so
we can't do the artist but we can do the
tracks what's the most popular
track by tag so we're going to do that
oh no so track group presumably is the
same artist i think you looked you saw
that didn't you alex sorry
what do you mean
because you said what's most popular
track by artists and the track group
we've got
no i mean
yeah i thought i thought maybe
if if a track is in a playlist we can
say if if it is
more than one um one playlist and then
by that
refer that it is a popular track i don't
think yes we have artists as an accepted
note but we have the track name so we
can say in date yeah yeah now just
checking that so i i wrote that down
wrong so if i go back to the model here
yeah so what we can do is a track group
is effectively our playlist
and track is obviously the track so what
we're going to do now is find out
those popular tracks in the track group
so what we're going to do we are going
to do match
t
track
and obviously we need to go into
this so we can do created
yeah so i just need to double check this
our user but that's fine for the
purposes of this it's all good
let's go to ohms
[Music]
then we're gonna do track group
track group
so if we then return now
t
i'm really scared to do that title in
case there's some really offensive title
name
um i'm scared i'm scared
so what did we say we said it was
track that track is title isn't it yet
yes title and then i think if we do
so so
um so do you want to do this by user or
john to do this by track by playlist you
look at my playlist i would do it by
playlist yeah okay so if we do so
because the user could have more than
one playlist with that song appearing on
there
right
and all the five frank
descending and then we said more so i'm
going to kill two birds with one stone
or as a colleague says feed two birds
with one scone which is much nicer
no birds died in that you just fed them
and if we say
you wanted to know songs that appear in
more than one playlist so what we can do
here
is
we can say
i think we can do it in here if not we
can put in a where clause so where
freck is greater than one so
we're saying it has to be more than one
song so hopefully
right so i need to just do this
i will
i'll do it like this let's do with t dot
title
count tg
as freck
frank is greater than one and then we
can do this this will definitely work
and i'll tell i'll make this a bit more
efficient later
oh hello
oh yeah i know i did wrong here
title and then what we do is we return
this as title this we're returning as
frac because we've already done this and
then this will okay
right so there you go so we're good
so we have
let me just quickly expand this there we
go
so there we go so we've made sure that
we're only pulling back the songs where
there is more than uh whether it appears
more than once in a playlist that
answers the first one which was which
song is on more than one playlist and we
can see the most popular
song here the most popular song on the
playlists that we've imported is into
the mist
that's the first question answered so
let's move on to the next question
the next question was
what's the most oh yes that was a
question that anyone asked so we've done
that and we've answered your one as well
alex i think he did another one which
was
i don't know we've done those so that
was the most popular
i don't know
a song by by playlist but we didn't we
didn't do that
right so sorry n1 we're going to do
yours now which is so we haven't got
artists but we can do it by track so
what we're going to do is we're going to
look at the most popular
song by
it's popular track by tag yeah that
should work
yeah so let's have a look at let's
quickly refer back to our data model so
we've got track so we've got track group
so we need to do is add the tag so i'm
just going to copy and paste this up
here
oh i'm going to make a copy of this
query as well actually so that i
remember to write it up later
save myself a bit of time
and then let's have a look and it's just
going to close this
just close these for now
i'm going to probably regret doing that
that's right remember it's name so just
go back up to our data model so let's do
we want to know by tag so let's bring in
tag as well
as tag
tag
and then what we're going to do
is
what's the most popular what's up most
popular track by
oh how we're going to do this
that the question is that
the track group has a tag but not a
track
yeah
so i'm just trying to think because
obviously we can't do so what perhaps
you want to say is what's the most
popular tag is probably what we're
trying to answer the question here yeah
i think that's that's that's going out
so yeah
so what we're gonna do is we're gonna
switch this out and we're gonna say
so we want to do
tag dot
name as
tag why not
actually
let's do this
with tag dot
name count
track
as frequency
i can do all of them that's fine then
we're going to return tag dot name
frequency or by frequency so that will
tell us what's the most popular
tag to music which i believe that's the
question you were asking anyone
if i'm not if i'm not answer your
question correctly let me know i'll
correct it
so oh i could've done that thing again
haven't i so what if i not edits
correctly so
okay right so the most popular tag being
used is electronica
i like me a bit of electronica it's all
good
and i suspect as well what's going on
here
is
there probably quite a few tracks
they've got the electronic attack as
well as the ambient tag
so what we could do as well is
if we go back to our popular song
we can have a look at what tags we've
got actually we can do that like we can
grab the songs and see which songs have
got the most
tags we'll do that one afterwards but i
think that's fun as well i think there's
loads i think we're gonna we're coming
back to this data set so don't panic
everybody i think there's a lot of
there's a lot of mileage we can get out
of this data set but let's go back to
because we've got 11 minutes left so we
might even be able to sneak in an extra
question so if any of you got an extra
question you want to ask pop it into the
chat
let's look at the next question which
was how many tags are similar
so i'm going to piss how many tags are
similar so if you remember if we go back
to our
i'm gonna just cheat and recycle this
one so we go back to our tags
go back to this one if you remember we
had some of these like ambient techno
and then ambient tech notes we've got an
extra t there but they're treated to
different tags
and then we've got things like
electronic electrical electrical
electronic car that's also similar ish
or they may be the same so yeah we've
got a couple of those a couple of those
going in there so what we can do is i'm
going to show you another apoc
function where we can do some fuzzy
matching so you got so within the apoc
library you've got a load of fuzzy
matching
fuzzy matching
options so let me have a quick let me
just bring back so a pop
text
let me just bring back the box i just
want to pull
the text function page so this is great
fun let me just snip over here
so we have got a load of text functions
available in apoc so i will
pop the
pop the link into the app for you all so
you can have
lots of really useful things in here and
you see all these text things you've got
some text extraction but the ones that
we're going to have a play with now are
the text similarity functions so
for those of you perhaps so you may have
come across things like lievenstein
distance levenstein similarities you've
got all of these
nice things that we can use to compare
the similarity with and the one i use is
i quite like using durhamson uh sorensen
dissimilarity as an example so the thing
you have to bear in mind of all of the
different
similarity functions is obviously
there is some
that each one does things a different
way so levenshtein similarity will do
things like liverstone distance will do
things like saying how similar are two
words based on you know how often
characters flip between them but it's
quite subjective so obviously two short
words
are you know may score quite well
whereas you can have two very long words
where just like you know somebody's
missed a letter or something and the
score's going to be quite bad so you
just have to be bearing in mind the
different
text fuzzy options arc no no problem at
all you are completely new to this so
don't panic you're learning we're all
learning we are all learning
so
let's have a look so i quite like using
the sorensen dye similarity i'm not
going to talk about the formula that's
been used but what i like about it is
that it gives me a handy score
out of a hundred to tell me how similar
to words i need it's quite nice if
you've got longish words so i'm going to
be using that one and i believe that is
it's a function so what we can do
is
just jump back
so what i'm going to be doing is i'm
going to be getting the tags i'm going
to t1 tag
and what i do what i'm going to do is
i'm going to pull back all of the
tags so we've got 28 tags and i'm going
to be doing two tags i'm going to
comparing those two tags and i'm just
going to be bringing back the
similarities so hopefully this will make
sense and those of you who
may have seen me with my
my my text comparison stuff this will
this be very familiar because i do this
all the time so
where t1 is greater than t2 i just do
this so this is basically just looking
into how the the two tag names are
are called we're not looking into
let's say
two playlists that have
tags and then comparing because of over
overlapping tracks then this is
this will be the more involved i think
but at the moment we're just looking
is tag one similarly sounding or written
then tag two and then compare the two
exactly that's exactly what we're doing
so what we're doing is we are pulling
we're basically pulling back
all of the tags so we're not looking
this is this is not a graphic query at
all we could then further extend this to
make a graphic query where what we can
say is well okay so these two tags
we've identified that these two tags
names string names are similar so what
does this mean for the song so we now
need to have to recompute all of the
songs that we you know before we said c
which was the most popular tag and that
kind of thing
maybe what we can do as well is when
we've done a bit of cleaning we can
start to associate
tags and go well does ambient only ever
happen with like
electronica or something like that so
there's lots of different things where
we can apply that
so let's do this so we're gonna and what
i'm doing here this where clause here is
just making sure that i don't compare
the tag against itself
and i'm cutting down so we don't do the
reciprocal tag comparison
and what i'm doing this id just
basically refers to the internal id of
the node so every node and relationship
in the database has its own internal id
and this is just what i'm using to check
against that so what we're going to do
here is we're going to do
return
apoc dot text dot sorenson by similarity
and we're going to do t1.name
t2.name
add score order by score descending
and obviously we want to know what we're
looking at so we're going to do t1 block
name t2.name so what we're going to do
here is we're going to bring the name
for the two tags the tag one name tag
two name we're then going to do the
you know basically we're going to using
source and similarities compare how
similar those names are as the score and
we're going to do the ones that most
similarly similar so let's have a look
at what comes back i think you miss your
mr d at the line three id2
could that be
yes you are right that should be id
okay right we are in business so look at
that
so so you can see this is just us having
a bit of fun
where we can see that ambient techno and
ambient techno with an extra are very
similar so they've got a score of about
96 similarity
and you can say electronic electronica
we've got the extra letter they're about
95
yeah so this is where you have to start
being a little bit careful and there is
a whole conversation about
uh
you know being aware of what your tool
does because all of a sudden you've got
neoclassical and classical and they're
saying what are 82 similar but yes when
you saw obviously you've got those extra
few words but obviously neo classical
and classical are going to be two
different genres near classical going to
be a newer classical music classical and
we're probably talking about you know
like sort of mozart and schubert that
kind of thing
so and then obviously you start to get
the idea of electro electronic electro
electronica you can see you can start
seeing as you should go down the list
they're becoming less and less similar
and then hopefully you've got a really
one where we there is an example they're
not similar at all so there you go so it
turns out oh oh
and this is where it starts to get
really interesting and this is where we
need to start using graphy data
so this is definitely going to be for
next episode so you can see here that
electro pop and
electro pop and dark ambient
like as far as strings compared they are
not similar at all they've got a score
of zero they are completely different
but from a genre perspective you can
easily have dark ambient electro pop
music you could easily have ambient
electro pop music you can have house
which you know some people may think it
you know has elements of electro pop so
this is where it starts to get quite
interesting
in that
whilst obviously when we're comparing
them just as the elements on their own
yes they're not similar because this is
it we're comparing strings the strings
are not similar yes absolutely score
zero this is where we start taking a
step back and if we want to start having
a look at well what tags associate with
other tags if we want to start making
recommendations around music or
discovering new you know genre that kind
of thing
this is when we want to start using
graphy structure so maybe you can start
using graphics structures of songs or
stats and you know playlists being
compared to those tags then we start to
say that whilst as a string electro pop
and dark ambient are not the same they
probably feature a lot together in
certain songs
does that make sense
i hope it makes sense that does make
completely sense yeah that's what i
meant earlier when i said okay we look
at the names of the of the tags and
comparing them but this is the perfect
example like you said electric pop and
house
is is is is definitely not a zero score
they they are
they are much more uh similarities than
there are not so if you would say techno
and classic yes of course that is a zero
overlap so they are completely different
different worlds
but um
and they would probably also count
counter very low score here because
techno and classical is is is written
differently obviously
but yeah like i said i think if we look
into the playlists
what playlists have what tag and what
songs are
are part of what playlist and i would
assume that a playlist with a electro
pop tag and a playlist with a house tag
probably will have some songs
um
both but a playlist
with the tag classical and the playlist
with the tag techno
definitely will not have the same song
oh they might
i'm well no
neoclassical their minds
but yeah no absolutely absolutely so
arcs just asked a quick question about
graphql is graphql rated more towards
data science or
uh
software software engineering so is that
i'm learning i'm learning both security
which is most titled so probably outside
the scope of this conversation i think
you tend to see graph graph think of
graphql as a way of being able to
retrieve your data so it's quite
possible you you'll definitely see them
in software engineering and i don't see
why you wouldn't see graphql being used
in data science for the purposes of
retrieving data so hopefully that helps
a little bit out of the scope of this
but hopefully that that will help you
and no you do not need a solid
background of python or ruby or
javascript to do this you are perfectly
capable of learning about graph
databases and querying them without
necessarily having to worry about
programming language so all of this
stuff we're doing now we're not we're
not touching any
language any programming languages we're
just using cypher so you are in good
company here to be able to learn this
okay so we had one more question we are
to time so let's quickly sneak in the
last question and then we are done for
another week
so one more question which was do groups
of tags appear together frequently so
let's go back to the data model
so i'm going to just do a quick this is
going to be like a partial query to
answer this question i'll just quickly
make sure i've got a copy of this query
before oh i've already got a copy of it
so let's bring back the
schema again to just remind ourselves
what it looks like so what i want to
know is
how often do so we're going to have to
just follow the track group so what we
want to see is
do
you know do tags gather together with
the track group so what we're going to
do
i'll do you know what based on the track
group you know do we have tags that
commonly appear together so i'm going to
do a quick and dirty example of this and
what we're going to do is let's just do
track group tag
and let's do
[Music]
match
track group sorry about that i think
that's the fire alarm practice
so it's the track group
has
tag
[Music]
and what we're going to do is just
return
we'll just let's just return some
[Music]
tags i can't remember what we had for
tag group what's it there there'll be
nice ways to do this so when we come
back to this we'll have a look at the
nice ways of doing this so i think track
group has an id
it has an internal id
oh it's got a uuid let's just stick with
uuid so
oh we need to go with the slug let's get
this log
return
slug
and let's return
all right let's just bring some of these
back just to get an idea so you can
start to see groups and then the next
extension to this
query would be to try and start to bring
together
bring bring together tags that are
commonly appearing and what you can see
very quickly but you can see where we're
starting to have this problem with the
the names you can see that you've got
ambient ambient ambient techno ambient
techno house
ambient ambient experimental
experimental electronic electronics so
you can straight straight away but by us
doing a bit of cleaning on some of the
strings we're probably going to clap
some of these down together
so yeah
so we've answered most of the questions
i'm going to try and expand on this one
a little bit more in the write-up of the
github repo so
we'll cover those
but otherwise
i think we've i think we're done for a
day we've
i think we've answered all the questions
looks like yes more or less yeah
every question you answered
will be a graph expert by next week he
promised so uh oh fantastic
god
think about that certified that that
certified neighborhood professional
exactly shiny t-shirt with a brand new
logo
that will be good um
yeah we will we will post it on
on github so you can follow along uh
afterwards um the video will be
available on youtube as usual there's a
playlist so if you if you
you know watch us for the first time
today check out our our twitch playlist
on youtube and then you can you can
watch the previous episodes
um
um yeah and i think um i'm looking
forward to next monday we have a couple
of other sessions i think will is on
this thursday
so um if you're interested in in graphql
uh willis is having his session this
thursday
uh
and we're back on monday um
okay
yes and if you've got any data sets so
if you've got some csvs or you know some
open
like sort of rest apis or something i
think pingas so either drop some you
know sort of put it in as a
pit is an issue on that github repo or
either sort of tweet me or alex on
twitter with your suggestions if you've
got it now quick chuck it in the chat if
you happen to be ready but yeah let us
know because we are totally up for
exploring any data sets that you have so
let us know and
we'll do it
exactly
take care see you soon have a lovely day
all bye bye